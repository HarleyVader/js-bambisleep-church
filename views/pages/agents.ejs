<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title><%= title %> - Bambi Sleep Church</title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        .agent-name-link {
            color: var(--color-primary-cyan);
            text-decoration: none;
            text-shadow: 0 0 5px var(--color-primary-cyan);
            transition: var(--transition-normal);
        }

        .agent-name-link:hover {
            color: var(--color-primary-magenta);
            text-shadow: 0 0 10px var(--color-primary-magenta);
            transform: scale(1.05);
        }

        .agent-stats-mini {
            display: flex;
            flex-wrap: wrap;
            gap: var(--spacing-xs);
            margin-bottom: var(--spacing-md);
        }

        .stat-badge {
            background: var(--color-overlay-purple);
            border: var(--border-thin) solid var(--color-primary-green);
            border-radius: var(--radius-sm);
            padding: var(--spacing-xs) var(--spacing-sm);
            font-size: var(--font-xs);
            color: var(--color-primary-green);
        }

        .stat-badge.status-idle {
            border-color: var(--color-primary-yellow);
            color: var(--color-primary-yellow);
        }

        .stat-badge.status-active {
            border-color: var(--color-primary-green);
            color: var(--color-primary-green);
        }

        .stat-badge.status-busy {
            border-color: var(--color-primary-magenta);
            color: var(--color-primary-magenta);
        }

        .tools-preview {
            margin-bottom: var(--spacing-md);
            font-size: var(--font-sm);
        }

        .button-group {
            display: flex;
            gap: var(--spacing-sm);
            margin-bottom: var(--spacing-md);
        }

        .ui-button-small {
            background: linear-gradient(45deg, var(--color-primary-green), var(--color-primary-cyan));
            border: none;
            border-radius: var(--radius-sm);
            padding: var(--spacing-xs) var(--spacing-sm);
            color: var(--color-bg-dark);
            font-size: var(--font-xs);
            font-weight: bold;
            cursor: pointer;
            transition: var(--transition-normal);
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .ui-button-small:hover {
            box-shadow: 0 0 10px var(--color-primary-green);
            transform: scale(1.05);
        }

        .ui-button-secondary {
            background: linear-gradient(45deg, var(--color-primary-magenta), var(--color-primary-cyan));
        }

        .ui-button-secondary:hover {
            box-shadow: 0 0 10px var(--color-primary-magenta);
        }
    </style>
</head>
<body>
    <%- include('../partials/header') %>
    
    <div class="agent-hub">
        <div class="hero-section">
            <h1 class="hero-title">ðŸ¤– Smolagents Agent Hub</h1>
            <p class="hero-subtitle">Create, configure, and orchestrate intelligent agents</p>
        </div>

        <!-- Agent Creation Form -->
        <div class="agent-form">
            <h2>Create New Agent</h2>
            <form id="createAgentForm">                <div class="form-group">
                    <label for="agentName">Agent Name</label>
                    <input type="text" id="agentName" name="name" required class="ui-input">
                </div>
                
                <div class="form-group">
                    <label for="agentDescription">Description</label>
                    <input type="text" id="agentDescription" name="description" class="ui-input">
                </div>
                
                <div class="form-group">
                    <label for="agentPrompt">System Prompt</label>
                    <textarea id="agentPrompt" name="prompt" placeholder="Define your agent's behavior and capabilities..." required class="ui-textarea"></textarea>
                </div><div class="form-group">
                    <label for="agentTools">Available Tools (comma-separated)</label>
                    <input type="text" id="agentTools" name="tools" placeholder="search, analyze, communicate" class="ui-input">
                </div>
                
                <div class="form-group">
                    <label for="mcpTools">MCP Server Tools</label>
                    <select id="mcpTools" multiple class="ui-select">
                        <% if (mcpTools && mcpTools.length > 0) { %>
                            <% mcpTools.forEach(tool => { %>
                                <option value="<%= tool.id %>"><%= tool.name %> - <%= tool.description %></option>
                            <% }); %>
                        <% } else { %>
                            <option disabled>No MCP tools available</option>
                        <% } %>
                    </select>
                    <small class="ui-text-small">
                        Hold Ctrl/Cmd to select multiple tools. Selected tools will be added to the agent's capabilities.
                    </small>
                </div>
                
                <button type="submit" class="ui-button">Create Agent</button>
            </form>
        </div>

        <!-- Existing Agents -->
        <div class="agent-grid" id="agentGrid">
            <% if (agents && agents.length > 0) { %>
                <% agents.forEach(agent => { %>                    <div class="agent-card" data-agent-id="<%= agent.id %>">
                        <h3><a href="/agents/<%= agent.id %>" class="agent-name-link"><%= agent.name %></a></h3>
                        <p><%= agent.description %></p>
                        <div class="agent-stats-mini">
                            <span class="stat-badge status-<%= agent.status %>"><%= agent.status %></span>
                            <span class="stat-badge">Created: <%= new Date(agent.created).toLocaleDateString() %></span>
                            <span class="stat-badge">Tools: <%= agent.tools.length %></span>
                        </div>
                        <% if (agent.tools && agent.tools.length > 0) { %>
                            <div class="tools-preview">
                                <strong>Tools:</strong> 
                                <span class="agent-tools-display">
                                    <%= agent.tools.slice(0, 3).join(', ') %><%= agent.tools.length > 3 ? '...' : '' %>
                                </span>
                            </div>
                        <% } %>
                        <div class="prompt-section">
                            <h4>Quick Prompt</h4>
                            <textarea placeholder="Enter your prompt..." class="agent-prompt-input ui-textarea"></textarea>
                            <div class="button-group">
                                <button class="ui-button-small" onclick="promptAgent('<%= agent.id %>')">Send Prompt</button>
                                <a href="/agents/<%= agent.id %>" class="ui-button-small ui-button-secondary">View Details</a>
                            </div>
                            
                            <div class="agent-response" id="response-<%= agent.id %>">
                                <h5>Agent Response:</h5>
                                <div class="response-content"></div>
                                <small class="ui-text-small">
                                    Response time: <span class="response-time"></span>
                                </small>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="agent-card">
                    <h3>No Agents Yet</h3>
                    <p>Create your first smolagents agent using the form above.</p>
                </div>
            <% } %>
        </div>

        <!-- Agent2Agent Communication Hub -->
        <div class="communication-hub">
            <h2>Agent Communication Hub</h2>
            <p>Enable agents to communicate with each other for complex workflows.</p>
              <div class="form-group">
                <label>From Agent</label>
                <select id="fromAgent" class="ui-select">
                    <option value="">Select source agent...</option>
                    <% if (agents) { %>
                        <% agents.forEach(agent => { %>
                            <option value="<%= agent.id %>"><%= agent.name %></option>
                        <% }); %>
                    <% } %>
                </select>
            </div>
            
            <div class="form-group">
                <label>To Agent</label>
                <select id="toAgent" class="ui-select">
                    <option value="">Select target agent...</option>
                    <% if (agents) { %>
                        <% agents.forEach(agent => { %>
                            <option value="<%= agent.id %>"><%= agent.name %></option>
                        <% }); %>
                    <% } %>
                </select>
            </div>
            
            <div class="form-group">
                <label>Message</label>
                <textarea id="commMessage" placeholder="Inter-agent communication message..." class="ui-textarea"></textarea>
            </div>
            
            <button class="ui-button" onclick="sendAgentCommunication()">Send Communication</button>
        </div>
    </div>

    <script>        // Create agent form handler
        document.getElementById('createAgentForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData);
            
            // Handle manual tools
            if (data.tools) {
                data.tools = data.tools.split(',').map(t => t.trim());
            } else {
                data.tools = [];
            }
            
            // Handle MCP tools
            const mcpSelect = document.getElementById('mcpTools');
            const selectedMcpTools = Array.from(mcpSelect.selectedOptions).map(option => option.value);
            data.tools = [...data.tools, ...selectedMcpTools];
            
            try {
                const response = await fetch('/api/agents', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Error creating agent');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        });        // Prompt agent function
        async function promptAgent(agentId) {
            const card = document.querySelector(`[data-agent-id="${agentId}"]`);
            const message = card.querySelector('.agent-prompt-input').value;
            const responseDiv = document.getElementById(`response-${agentId}`);
            const responseContent = responseDiv.querySelector('.response-content');
            const responseTime = responseDiv.querySelector('.response-time');
            
            if (!message) {
                alert('Please enter a prompt');
                return;
            }
            
            // Show loading state
            responseDiv.style.display = 'block';
            responseContent.textContent = 'Processing...';
            responseTime.textContent = 'Processing...';
            
            const startTime = Date.now();
            
            try {
                const response = await fetch(`/api/agents/${agentId}/prompt`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message })
                });
                
                const result = await response.json();
                const endTime = Date.now();
                const duration = ((endTime - startTime) / 1000).toFixed(2);
                
                // Display response
                responseContent.textContent = result.response || 'No response received';
                responseTime.textContent = `${duration}s`;
                card.querySelector('.agent-prompt-input').value = '';
                
            } catch (error) {
                const endTime = Date.now();
                const duration = ((endTime - startTime) / 1000).toFixed(2);
                
                responseContent.textContent = `Error: ${error.message}`;
                responseTime.textContent = `${duration}s (failed)`;
            }
        }

        // Agent communication function
        async function sendAgentCommunication() {
            const fromAgent = document.getElementById('fromAgent').value;
            const toAgent = document.getElementById('toAgent').value;
            const message = document.getElementById('commMessage').value;
            
            if (!fromAgent || !toAgent || !message) {
                alert('Please fill all communication fields');
                return;
            }
            
            try {
                const response = await fetch('/api/agents/communicate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ fromAgentId: fromAgent, toAgentId: toAgent, message })
                });
                
                const result = await response.json();
                alert('Communication sent successfully!');
                document.getElementById('commMessage').value = '';
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }
    </script>

    <%- include('../partials/footer') %>
</body>
</html>
