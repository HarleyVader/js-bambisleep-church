<%- include('../partials/header') %>

<style>
  .agentic-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
    display: grid;
    grid-template-columns: 1fr 400px;
    gap: 2rem;
    height: calc(100vh - 200px);
  }

  .main-panel {
    display: flex;
    flex-direction: column;
    background: rgba(26, 26, 26, 0.8);
    border: 1px solid var(--primary);
    border-radius: 15px;
    overflow: hidden;
  }

  .agentic-header {
    background: linear-gradient(135deg, var(--primary), var(--secondary));
    padding: 1.5rem;
    text-align: center;
    border-bottom: 1px solid var(--primary);
  }

  .agentic-title {
    font-family: 'Orbitron', monospace;
    font-size: 2rem;
    color: white;
    margin-bottom: 0.5rem;
    text-shadow: 0 0 20px rgba(255, 255, 255, 0.5);
  }

  .agentic-subtitle {
    color: rgba(255, 255, 255, 0.9);
    font-size: 1rem;
    font-weight: 300;
  }

  .system-status {
    padding: 1.5rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .status-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .status-card {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 10px;
    padding: 1rem;
    text-align: center;
  }

  .status-card.healthy {
    border-color: #10b981;
    background: rgba(16, 185, 129, 0.1);
  }

  .status-card.warning {
    border-color: #f59e0b;
    background: rgba(245, 158, 11, 0.1);
  }

  .status-card.error {
    border-color: #ef4444;
    background: rgba(239, 68, 68, 0.1);
  }

  .service-name {
    font-weight: bold;
    font-size: 0.9rem;
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .service-status {
    font-size: 1.2rem;
    margin-bottom: 0.5rem;
  }

  .service-detail {
    font-size: 0.8rem;
    color: var(--text-muted);
  }

  .agentic-controls {
    padding: 1.5rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .control-group {
    margin-bottom: 1.5rem;
  }

  .control-label {
    font-weight: bold;
    margin-bottom: 0.5rem;
    color: var(--primary);
    text-transform: uppercase;
    font-size: 0.9rem;
    letter-spacing: 1px;
  }

  .control-buttons {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .agentic-btn {
    background: linear-gradient(135deg, var(--primary), var(--secondary));
    border: none;
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .agentic-btn:hover:not(:disabled) {
    transform: scale(1.05);
    box-shadow: 0 8px 25px rgba(255, 0, 255, 0.4);
  }

  .agentic-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .agentic-btn.secondary {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.3);
  }

  .agentic-btn.danger {
    background: linear-gradient(135deg, #ef4444, #dc2626);
  }

  .progress-section {
    flex: 1;
    padding: 1.5rem;
    overflow-y: auto;
  }

  .progress-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .progress-title {
    font-size: 1.2rem;
    font-weight: bold;
    color: var(--primary);
  }

  .session-info {
    font-size: 0.8rem;
    color: var(--text-muted);
  }

  .phase-progress {
    margin-bottom: 1.5rem;
  }

  .phase-item {
    display: flex;
    align-items: center;
    padding: 0.75rem;
    margin-bottom: 0.5rem;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 8px;
    border-left: 4px solid transparent;
  }

  .phase-item.active {
    border-left-color: var(--primary);
    background: rgba(255, 0, 255, 0.1);
  }

  .phase-item.completed {
    border-left-color: #10b981;
    background: rgba(16, 185, 129, 0.1);
  }

  .phase-icon {
    font-size: 1.2rem;
    margin-right: 0.75rem;
    width: 24px;
    text-align: center;
  }

  .phase-details {
    flex: 1;
  }

  .phase-name {
    font-weight: bold;
    margin-bottom: 0.25rem;
  }

  .phase-description {
    font-size: 0.8rem;
    color: var(--text-muted);
  }

  .phase-status {
    font-size: 0.8rem;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    background: rgba(255, 255, 255, 0.1);
  }

  .knowledge-stats {
    background: rgba(0, 0, 0, 0.3);
    border-radius: 10px;
    padding: 1rem;
    margin-bottom: 1rem;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }

  .stat-item {
    text-align: center;
  }

  .stat-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--primary);
  }

  .stat-label {
    font-size: 0.8rem;
    color: var(--text-muted);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .side-panel {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .query-panel {
    background: rgba(26, 26, 26, 0.8);
    border: 1px solid var(--primary);
    border-radius: 15px;
    padding: 1.5rem;
  }

  .query-header {
    font-size: 1.1rem;
    font-weight: bold;
    color: var(--primary);
    margin-bottom: 1rem;
    text-align: center;
  }

  .query-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-label {
    font-size: 0.9rem;
    font-weight: bold;
    color: var(--text);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .form-input {
    background: rgba(0, 0, 0, 0.5);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 8px;
    padding: 0.75rem;
    color: var(--text);
    font-family: inherit;
    font-size: 0.9rem;
  }

  .form-input:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 10px rgba(255, 0, 255, 0.3);
  }

  .form-select {
    background: rgba(0, 0, 0, 0.5);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 8px;
    padding: 0.75rem;
    color: var(--text);
    font-family: inherit;
    font-size: 0.9rem;
  }

  .results-panel {
    background: rgba(26, 26, 26, 0.8);
    border: 1px solid var(--primary);
    border-radius: 15px;
    padding: 1.5rem;
    flex: 1;
    overflow-y: auto;
  }

  .results-header {
    font-size: 1.1rem;
    font-weight: bold;
    color: var(--primary);
    margin-bottom: 1rem;
    text-align: center;
  }

  .result-item {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
  }

  .result-title {
    font-weight: bold;
    color: var(--primary);
    margin-bottom: 0.5rem;
  }

  .result-summary {
    font-size: 0.9rem;
    color: var(--text);
    margin-bottom: 0.5rem;
    line-height: 1.4;
  }

  .result-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.8rem;
    color: var(--text-muted);
  }

  .result-category {
    background: rgba(255, 0, 255, 0.2);
    color: var(--primary);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.7rem;
    text-transform: uppercase;
  }

  .quality-score {
    background: rgba(16, 185, 129, 0.2);
    color: #10b981;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.7rem;
    font-weight: bold;
  }

  .loading-spinner {
    display: inline-block;
    width: 20px;
    height: 20px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: var(--primary);
    animation: spin 1s ease-in-out infinite;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .log-panel {
    background: rgba(0, 0, 0, 0.5);
    border-radius: 8px;
    padding: 1rem;
    margin-top: 1rem;
    max-height: 200px;
    overflow-y: auto;
    font-family: 'Courier New', monospace;
    font-size: 0.8rem;
  }

  .log-entry {
    margin-bottom: 0.5rem;
    padding: 0.25rem;
    border-radius: 4px;
  }

  .log-entry.info {
    color: #60a5fa;
  }

  .log-entry.success {
    color: #10b981;
  }

  .log-entry.warning {
    color: #f59e0b;
  }

  .log-entry.error {
    color: #ef4444;
  }

  .empty-state {
    text-align: center;
    color: var(--text-muted);
    padding: 2rem;
    font-style: italic;
  }

  .responsive-mobile {
    display: none;
  }

  @media (max-width: 1200px) {
    .agentic-container {
      grid-template-columns: 1fr;
      grid-template-rows: auto 1fr;
    }

    .side-panel {
      order: -1;
    }

    .responsive-mobile {
      display: block;
    }

    .responsive-desktop {
      display: none;
    }
  }

  @media (max-width: 768px) {
    .agentic-container {
      padding: 1rem;
      gap: 1rem;
    }

    .status-grid {
      grid-template-columns: 1fr;
    }

    .control-buttons {
      flex-direction: column;
    }

    .stats-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<div class="agentic-container">
  <!-- Main Control Panel -->
  <div class="main-panel">
    <!-- Header -->
    <div class="agentic-header">
      <h1 class="agentic-title">ü§ñ Agentic Knowledge Builder</h1>
      <p class="agentic-subtitle">Autonomous AI-Driven BambiSleep Knowledge Base System</p>
    </div>

    <!-- System Status -->
    <div class="system-status">
      <div class="status-grid">
        <div id="mongoStatus" class="status-card">
          <div class="service-name">üóÑÔ∏è MongoDB</div>
          <div class="service-status">Checking...</div>
          <div class="service-detail">Knowledge Storage</div>
        </div>
        <div id="lmstudioStatus" class="status-card">
          <div class="service-name">üß† LMStudio</div>
          <div class="service-status">Checking...</div>
          <div class="service-detail">AI Brain</div>
        </div>
        <div id="crawlerStatus" class="status-card healthy">
          <div class="service-name">üï∑Ô∏è Web Crawler</div>
          <div class="service-status">Ready</div>
          <div class="service-detail">Content Discovery</div>
        </div>
      </div>
    </div>

    <!-- Agentic Controls -->
    <div class="agentic-controls">
      <div class="control-group">
        <div class="control-label">System Control</div>
        <div class="control-buttons">
          <button id="initializeBtn" class="agentic-btn" onclick="initializeSystem()">
            üöÄ Initialize System
          </button>
          <button id="startBuildingBtn" class="agentic-btn" onclick="startBuilding()" disabled>
            üèóÔ∏è Start Building
          </button>
          <button id="stopBuildingBtn" class="agentic-btn danger" onclick="stopBuilding()" disabled>
            ÔøΩ Stop Building
          </button>
        </div>
      </div>

      <div class="control-group">
        <div class="control-label">Knowledge Base</div>
        <div class="control-buttons">
          <button id="getStatsBtn" class="agentic-btn secondary" onclick="getStats()">
            üìä Get Statistics
          </button>
          <button id="getLearningPathBtn" class="agentic-btn secondary" onclick="getLearningPath()">
            üéØ Learning Paths
          </button>
          <button id="refreshStatusBtn" class="agentic-btn secondary" onclick="refreshStatus()">
            üîÑ Refresh Status
          </button>
        </div>
      </div>
    </div>

    <!-- Progress Section -->
    <div class="progress-section">
      <div class="progress-header">
        <div class="progress-title">Autonomous Building Progress</div>
        <div id="sessionInfo" class="session-info">No active session</div>
      </div>

      <!-- Knowledge Base Stats -->
      <div class="knowledge-stats">
        <div class="stats-grid">
          <div class="stat-item">
            <div id="totalContent" class="stat-value">0</div>
            <div class="stat-label">Total Content</div>
          </div>
          <div class="stat-item">
            <div id="processedPages" class="stat-value">0</div>
            <div class="stat-label">Processed Pages</div>
          </div>
          <div class="stat-item">
            <div id="categorizedContent" class="stat-value">0</div>
            <div class="stat-label">Categorized</div>
          </div>
          <div class="stat-item">
            <div id="qualityScore" class="stat-value">N/A</div>
            <div class="stat-label">Avg Quality</div>
          </div>
        </div>
      </div>

      <!-- Phase Progress -->
      <div class="phase-progress">
        <div id="phase1" class="phase-item">
          <div class="phase-icon">üìã</div>
          <div class="phase-details">
            <div class="phase-name">Content Discovery</div>
            <div class="phase-description">Finding relevant BambiSleep content</div>
          </div>
          <div class="phase-status">Waiting</div>
        </div>
        <div id="phase2" class="phase-item">
          <div class="phase-icon">üß†</div>
          <div class="phase-details">
            <div class="phase-name">AI Prioritization</div>
            <div class="phase-description">Intelligent content analysis and ranking</div>
          </div>
          <div class="phase-status">Waiting</div>
        </div>
        <div id="phase3" class="phase-item">
          <div class="phase-icon">üï∑Ô∏è</div>
          <div class="phase-details">
            <div class="phase-name">Intelligent Crawling</div>
            <div class="phase-description">Selective content extraction</div>
          </div>
          <div class="phase-status">Waiting</div>
        </div>
        <div id="phase4" class="phase-item">
          <div class="phase-icon">üóÇÔ∏è</div>
          <div class="phase-details">
            <div class="phase-name">Knowledge Organization</div>
            <div class="phase-description">AI-powered categorization</div>
          </div>
          <div class="phase-status">Waiting</div>
        </div>
        <div id="phase5" class="phase-item">
          <div class="phase-icon">üìä</div>
          <div class="phase-details">
            <div class="phase-name">Summary Generation</div>
            <div class="phase-description">Knowledge base finalization</div>
          </div>
          <div class="phase-status">Waiting</div>
        </div>
      </div>

      <!-- Activity Log -->
      <div id="activityLog" class="log-panel">
        <div class="log-entry info">System ready for initialization...</div>
      </div>
    </div>
  </div>

  <!-- Side Panel -->
  <div class="side-panel">
    <!-- Query Panel -->
    <div class="query-panel">
      <div class="query-header">üîç Knowledge Base Query</div>
      <div class="query-form">
        <div class="form-group">
          <label class="form-label">Category</label>
          <select id="queryCategory" class="form-select">
            <option value="">All Categories</option>
            <option value="safety">Safety</option>
            <option value="beginners">Beginners</option>
            <option value="sessions">Sessions</option>
            <option value="triggers">Triggers</option>
            <option value="community">Community</option>
            <option value="technical">Technical</option>
          </select>
        </div>
        <div class="form-group">
          <label class="form-label">Safety Level</label>
          <select id="querySafetyLevel" class="form-select">
            <option value="">All Levels</option>
            <option value="beginner">Beginner</option>
            <option value="intermediate">Intermediate</option>
            <option value="advanced">Advanced</option>
            <option value="safety_critical">Safety Critical</option>
          </select>
        </div>
        <div class="form-group">
          <label class="form-label">Text Search</label>
          <input id="queryText" class="form-input" type="text" placeholder="Search in titles and content...">
        </div>
        <div class="form-group">
          <label class="form-label">Min Quality (1-10)</label>
          <input id="queryQuality" class="form-input" type="number" min="1" max="10" placeholder="5">
        </div>
        <button id="queryBtn" class="agentic-btn" onclick="queryKnowledge()">
          ÔøΩ Search Knowledge
        </button>
      </div>
    </div>

    <!-- Results Panel -->
    <div class="results-panel">
      <div class="results-header">üìö Search Results</div>
      <div id="queryResults" class="empty-state">
        Use the search form to query the knowledge base.<br>
        Results will appear here once content is available.
      </div>
    </div>
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  // Socket.IO connection for agentic system
  const socket = io();

  // System state
  let systemInitialized = false;
  let buildingInProgress = false;
  let currentSessionId = null;

  // DOM elements
  const mongoStatus = document.getElementById('mongoStatus');
  const lmstudioStatus = document.getElementById('lmstudioStatus');
  const initializeBtn = document.getElementById('initializeBtn');
  const startBuildingBtn = document.getElementById('startBuildingBtn');
  const stopBuildingBtn = document.getElementById('stopBuildingBtn');
  const activityLog = document.getElementById('activityLog');
  const queryResults = document.getElementById('queryResults');

  // Stats elements
  const totalContent = document.getElementById('totalContent');
  const processedPages = document.getElementById('processedPages');
  const categorizedContent = document.getElementById('categorizedContent');
  const qualityScore = document.getElementById('qualityScore');
  const sessionInfo = document.getElementById('sessionInfo');

  // Initialize system on page load
  document.addEventListener('DOMContentLoaded', () => {
    addLog('üöÄ Agentic Knowledge Builder interface loaded', 'info');
    refreshStatus();
  });

  // Socket event handlers
  socket.on('connect', () => {
    addLog('‚úÖ Connected to server', 'success');
  });

  socket.on('disconnect', () => {
    addLog('‚ùå Disconnected from server', 'error');
  });

  socket.on('agentic:status', (data) => {
    updateSystemStatus(data);
  });

  socket.on('agentic:progress', (data) => {
    updateProgress(data);
  });

  socket.on('agentic:complete', (data) => {
    buildingComplete(data);
  });

  socket.on('agentic:error', (data) => {
    addLog(`‚ùå Error: ${data.error}`, 'error');
    resetButtons();
  });

  // System control functions
  async function initializeSystem() {
    try {
      addLog('ü§ñ Initializing Agentic Knowledge Builder...', 'info');
      setButtonLoading(initializeBtn, true);

      const response = await fetch('/api/agentic/initialize', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      const result = await response.json();

      if (result.success) {
        systemInitialized = true;
        addLog('‚úÖ System initialized successfully', 'success');
        startBuildingBtn.disabled = false;
        updateServiceStatus('mongo', result.status.services.mongodb);
        updateServiceStatus('lmstudio', result.status.services.lmstudio);
      } else {
        addLog(`‚ùå Initialization failed: ${result.error}`, 'error');
      }
    } catch (error) {
      addLog(`‚ùå Initialization error: ${error.message}`, 'error');
    } finally {
      setButtonLoading(initializeBtn, false);
    }
  }

  async function startBuilding() {
    try {
      addLog('üèóÔ∏è Starting autonomous knowledge building...', 'info');
      setButtonLoading(startBuildingBtn, true);
      buildingInProgress = true;
      stopBuildingBtn.disabled = false;

      // Reset phases
      resetPhases();

      const response = await fetch('/api/agentic/start-building', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          forceRestart: false
        })
      });

      const result = await response.json();
      currentSessionId = result.sessionId;

      if (result.success) {
        addLog('üéâ Autonomous building completed successfully!', 'success');
        sessionInfo.textContent = `Session: ${currentSessionId}`;
        updateStats(result.statistics);
        setAllPhasesComplete();
      } else {
        addLog(`‚ùå Building failed: ${result.error}`, 'error');
      }
    } catch (error) {
      addLog(`‚ùå Building error: ${error.message}`, 'error');
    } finally {
      buildingInProgress = false;
      setButtonLoading(startBuildingBtn, false);
      stopBuildingBtn.disabled = true;
    }
  }

  async function stopBuilding() {
    try {
      addLog('üõë Stopping autonomous building...', 'warning');

      const response = await fetch('/api/agentic/stop-building', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      const result = await response.json();

      if (result.success) {
        buildingInProgress = false;
        addLog('‚èπÔ∏è Building stopped', 'warning');
        resetPhases();
      }
    } catch (error) {
      addLog(`‚ùå Stop error: ${error.message}`, 'error');
    } finally {
      stopBuildingBtn.disabled = true;
    }
  }

  async function refreshStatus() {
    try {
      const response = await fetch('/api/agentic/status');
      const result = await response.json();

      if (result.success) {
        updateSystemStatus(result.status);
        updateServiceStatus('mongo', result.status.services.mongodb);
        updateServiceStatus('lmstudio', result.status.services.lmstudio);

        if (result.status.stats) {
          updateStats(result.status.stats);
        }

        buildingInProgress = result.status.isRunning;
        updateButtonStates();
      }
    } catch (error) {
      addLog(`‚ùå Status refresh error: ${error.message}`, 'error');
    }
  }

  async function getStats() {
    try {
      addLog('üìä Fetching knowledge base statistics...', 'info');

      const response = await fetch('/api/agentic/stats');
      const result = await response.json();

      if (result.success) {
        addLog('üìà Statistics retrieved successfully', 'success');
        displayStats(result.knowledgeBaseStats);
      } else {
        addLog(`‚ùå Stats error: ${result.error}`, 'error');
      }
    } catch (error) {
      addLog(`‚ùå Stats fetch error: ${error.message}`, 'error');
    }
  }

  async function getLearningPath() {
    try {
      addLog('üéØ Generating learning path...', 'info');

      const response = await fetch('/api/agentic/learning-path', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          userType: 'complete_beginner',
          interests: ['safety', 'sessions']
        })
      });

      const result = await response.json();

      if (result.success) {
        addLog('üéì Learning path generated successfully', 'success');
        displayLearningPath(result.learningPath);
      } else {
        addLog(`‚ùå Learning path error: ${result.error}`, 'error');
      }
    } catch (error) {
      addLog(`‚ùå Learning path fetch error: ${error.message}`, 'error');
    }
  }

  async function queryKnowledge() {
    try {
      const query = {
        category: document.getElementById('queryCategory').value || undefined,
        safetyLevel: document.getElementById('querySafetyLevel').value || undefined,
        textSearch: document.getElementById('queryText').value || undefined,
        minQuality: parseInt(document.getElementById('queryQuality').value) || undefined
      };

      // Remove undefined values
      Object.keys(query).forEach(key =>
        query[key] === undefined && delete query[key]
      );

      addLog(`üîç Querying knowledge base...`, 'info');

      const response = await fetch('/api/agentic/query', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          query,
          limit: 10,
          sortBy: 'priority'
        })
      });

      const result = await response.json();

      if (result.success) {
        addLog(`üìö Found ${result.resultsCount} results`, 'success');
        displayQueryResults(result.results);
      } else {
        addLog(`‚ùå Query error: ${result.error}`, 'error');
      }
    } catch (error) {
      addLog(`‚ùå Query fetch error: ${error.message}`, 'error');
    }
  }

  // UI update functions
  function updateServiceStatus(service, isHealthy) {
    const statusCard = service === 'mongo' ? mongoStatus : lmstudioStatus;
    const statusText = statusCard.querySelector('.service-status');

    statusCard.className = `status-card ${isHealthy ? 'healthy' : 'error'}`;
    statusText.textContent = isHealthy ? 'Connected' : 'Unavailable';
  }

  function updateStats(stats) {
    if (stats.totalPages !== undefined) processedPages.textContent = stats.totalPages;
    if (stats.processedPages !== undefined) totalContent.textContent = stats.processedPages;
    if (stats.categorizedContent !== undefined) categorizedContent.textContent = stats.categorizedContent;
  }

  function updateProgress(data) {
    if (data.phase) {
      setPhaseActive(data.phase);
      addLog(`üìã Phase ${data.phase}: ${data.message}`, 'info');
    }
  }

  function setPhaseActive(phaseNumber) {
    // Reset all phases
    for (let i = 1; i <= 5; i++) {
      const phase = document.getElementById(`phase${i}`);
      const status = phase.querySelector('.phase-status');

      if (i < phaseNumber) {
        phase.className = 'phase-item completed';
        status.textContent = 'Completed';
      } else if (i === phaseNumber) {
        phase.className = 'phase-item active';
        status.textContent = 'Active';
      } else {
        phase.className = 'phase-item';
        status.textContent = 'Waiting';
      }
    }
  }

  function setAllPhasesComplete() {
    for (let i = 1; i <= 5; i++) {
      const phase = document.getElementById(`phase${i}`);
      const status = phase.querySelector('.phase-status');
      phase.className = 'phase-item completed';
      status.textContent = 'Completed';
    }
  }

  function resetPhases() {
    for (let i = 1; i <= 5; i++) {
      const phase = document.getElementById(`phase${i}`);
      const status = phase.querySelector('.phase-status');
      phase.className = 'phase-item';
      status.textContent = 'Waiting';
    }
  }

  function displayQueryResults(results) {
    if (results.length === 0) {
      queryResults.innerHTML = '<div class="empty-state">No results found for your query.</div>';
      return;
    }

    queryResults.innerHTML = results.map(result => `
      <div class="result-item">
        <div class="result-title">${escapeHtml(result.title)}</div>
        <div class="result-summary">${escapeHtml(result.summary)}</div>
        <div class="result-meta">
          <span class="result-category">${result.category}</span>
          <span class="quality-score">Quality: ${result.qualityScore}/10</span>
        </div>
      </div>
    `).join('');
  }

  function displayStats(stats) {
    addLog(`üìä Total Content: ${stats.totalContent}`, 'info');
    addLog(`üìà Categories: ${stats.categoryBreakdown.length}`, 'info');
    addLog(`üèÜ Top Quality: ${stats.topQualityContent[0]?.title || 'None'}`, 'info');
  }

  function displayLearningPath(path) {
    path.forEach((item, index) => {
      addLog(`üéØ Step ${index + 1}: ${item.description} (${item.contentCount} items)`, 'info');
    });
  }

  function addLog(message, type = 'info') {
    const logEntry = document.createElement('div');
    logEntry.className = `log-entry ${type}`;
    logEntry.textContent = `${new Date().toLocaleTimeString()} - ${message}`;

    activityLog.appendChild(logEntry);
    activityLog.scrollTop = activityLog.scrollHeight;

    // Keep only last 50 entries
    while (activityLog.children.length > 50) {
      activityLog.removeChild(activityLog.firstChild);
    }
  }

  function setButtonLoading(button, loading) {
    if (loading) {
      button.disabled = true;
      button.innerHTML = '<div class="loading-spinner"></div> Loading...';
    } else {
      button.disabled = false;
      button.innerHTML = button.dataset.originalText || button.textContent.replace('Loading...', '').trim();
    }
  }

  function updateButtonStates() {
    startBuildingBtn.disabled = !systemInitialized || buildingInProgress;
    stopBuildingBtn.disabled = !buildingInProgress;
  }

  function resetButtons() {
    buildingInProgress = false;
    updateButtonStates();
  }

  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  // Store original button text
  document.querySelectorAll('.agentic-btn').forEach(btn => {
    btn.dataset.originalText = btn.textContent;
  });
</script>

<%- include('../partials/footer') %>
