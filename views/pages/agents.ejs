<%- include('../partials/header') %>

<style>
  .agent-container {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 1rem;
  }

  .agent-grid {
    display: grid;
    grid-template-columns: 1fr 300px;
    gap: 2rem;
    margin-top: 2rem;
  }

  @media (max-width: 768px) {
    .agent-grid {
      grid-template-columns: 1fr;
    }
  }

  .chat-container {
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    height: 600px;
  }

  .chat-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .chat-header h2 {
    margin: 0;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .status-indicator {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: #4ade80;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }

  .chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 1.5rem;
    background: #f9fafb;
  }

  .message {
    margin-bottom: 1.5rem;
    display: flex;
    gap: 1rem;
    animation: slideIn 0.3s ease-out;
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .message-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    flex-shrink: 0;
  }

  .user-message .message-avatar {
    background: #3b82f6;
  }

  .agent-message .message-avatar {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  }

  .system-message .message-avatar {
    background: #6b7280;
  }

  .message-content {
    flex: 1;
    min-width: 0;
  }

  .message-bubble {
    background: white;
    padding: 1rem;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .user-message .message-bubble {
    background: #eff6ff;
    border: 1px solid #dbeafe;
  }

  .agent-message .message-bubble {
    background: white;
    border: 1px solid #e5e7eb;
  }

  .message-meta {
    display: flex;
    gap: 1rem;
    margin-top: 0.5rem;
    font-size: 0.85rem;
    color: #6b7280;
  }

  .tool-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.25rem 0.75rem;
    background: #fef3c7;
    color: #92400e;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 600;
  }

  .iteration-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.25rem 0.75rem;
    background: #dbeafe;
    color: #1e40af;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 600;
  }

  .typing-indicator {
    display: flex;
    gap: 0.5rem;
    padding: 1rem;
    background: white;
    border-radius: 12px;
    width: fit-content;
  }

  .typing-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #9ca3af;
    animation: typing 1.4s infinite;
  }

  .typing-dot:nth-child(2) {
    animation-delay: 0.2s;
  }

  .typing-dot:nth-child(3) {
    animation-delay: 0.4s;
  }

  @keyframes typing {
    0%, 60%, 100% {
      transform: translateY(0);
    }
    30% {
      transform: translateY(-10px);
    }
  }

  .chat-input-container {
    padding: 1.5rem;
    background: white;
    border-top: 1px solid #e5e7eb;
  }

  .chat-input-wrapper {
    display: flex;
    gap: 1rem;
  }

  .chat-input {
    flex: 1;
    padding: 0.75rem 1rem;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    font-size: 1rem;
    transition: border-color 0.2s;
  }

  .chat-input:focus {
    outline: none;
    border-color: #667eea;
  }

  .send-button {
    padding: 0.75rem 2rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: transform 0.2s, box-shadow 0.2s;
  }

  .send-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
  }

  .send-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .sidebar {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .info-card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: 1.5rem;
  }

  .info-card h3 {
    margin: 0 0 1rem 0;
    font-size: 1.1rem;
    color: #1f2937;
  }

  .stat-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 0;
    border-bottom: 1px solid #f3f4f6;
  }

  .stat-item:last-child {
    border-bottom: none;
  }

  .stat-label {
    color: #6b7280;
    font-size: 0.9rem;
  }

  .stat-value {
    font-weight: 600;
    color: #1f2937;
    font-size: 1.1rem;
  }

  .tool-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .tool-item {
    padding: 0.75rem;
    background: #f9fafb;
    border-radius: 8px;
    margin-bottom: 0.75rem;
    display: flex;
    align-items: start;
    gap: 0.75rem;
  }

  .tool-icon {
    font-size: 1.5rem;
    flex-shrink: 0;
  }

  .tool-info h4 {
    margin: 0 0 0.25rem 0;
    font-size: 0.9rem;
    color: #1f2937;
  }

  .tool-info p {
    margin: 0;
    font-size: 0.8rem;
    color: #6b7280;
  }

  .action-buttons {
    display: flex;
    gap: 0.5rem;
    margin-top: 1rem;
  }

  .action-btn {
    flex: 1;
    padding: 0.5rem;
    border: 1px solid #e5e7eb;
    background: white;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: all 0.2s;
  }

  .action-btn:hover {
    background: #f9fafb;
    border-color: #667eea;
  }

  .intro-section {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 3rem 2rem;
    border-radius: 12px;
    text-align: center;
    margin-bottom: 2rem;
  }

  .intro-section h1 {
    margin: 0 0 1rem 0;
    font-size: 2.5rem;
  }

  .intro-section p {
    margin: 0;
    font-size: 1.1rem;
    opacity: 0.9;
  }

  .quick-prompts {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 1rem;
  }

  .quick-prompt {
    padding: 0.5rem 1rem;
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 20px;
    color: white;
    cursor: pointer;
    font-size: 0.9rem;
    transition: all 0.2s;
  }

  .quick-prompt:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-2px);
  }
</style>

<div class="agent-container">
  <div class="intro-section">
    <h1>üß† AI Agent Chat</h1>
    <p>Powered by LMStudio with autonomous MCP tool calling</p>
    <div class="quick-prompts">
      <span class="quick-prompt" onclick="sendQuickPrompt('What BambiSleep files are available?')">üìö Show files</span>
      <span class="quick-prompt" onclick="sendQuickPrompt('Give me statistics about the knowledge base')">üìä Show stats</span>
      <span class="quick-prompt" onclick="sendQuickPrompt('Fetch content from https://bambisleep.info')">üåê Fetch webpage</span>
      <span class="quick-prompt" onclick="sendQuickPrompt('Find files about sleep triggers')">üîç Find triggers</span>
    </div>
  </div>

  <div class="agent-grid">
    <div class="chat-container">
      <div class="chat-header">
        <h2>
          <span class="status-indicator"></span>
          MCP Agent
        </h2>
        <button class="action-btn" onclick="clearChat()" style="color: white; border-color: rgba(255,255,255,0.3);">
          üóëÔ∏è Clear
        </button>
      </div>

      <div class="chat-messages" id="chatMessages">
        <div class="message system-message">
          <div class="message-avatar">‚ÑπÔ∏è</div>
          <div class="message-content">
            <div class="message-bubble">
              Welcome to the MCP Agent! I can help you search the BambiSleep knowledge base, fetch webpage content, and provide statistics. Just ask me anything!
            </div>
          </div>
        </div>
      </div>

      <div class="chat-input-container">
        <div class="chat-input-wrapper">
          <input 
            type="text" 
            id="chatInput" 
            class="chat-input" 
            placeholder="Ask me anything about BambiSleep..."
            onkeypress="handleKeyPress(event)"
          />
          <button id="sendButton" class="send-button" onclick="sendMessage()">
            Send
          </button>
        </div>
      </div>
    </div>

    <div class="sidebar">
      <div class="info-card">
        <h3>üìä Session Stats</h3>
        <div class="stat-item">
          <span class="stat-label">Messages</span>
          <span class="stat-value" id="statMessages">0</span>
        </div>
        <div class="stat-item">
          <span class="stat-label">Tools Used</span>
          <span class="stat-value" id="statTools">0</span>
        </div>
        <div class="stat-item">
          <span class="stat-label">Iterations</span>
          <span class="stat-value" id="statIterations">0</span>
        </div>
      </div>

      <div class="info-card">
        <h3>üîß Available Tools</h3>
        <ul class="tool-list">
          <li class="tool-item">
            <span class="tool-icon">üîç</span>
            <div class="tool-info">
              <h4>search_knowledge</h4>
              <p>Search BambiSleep knowledge base</p>
            </div>
          </li>
          <li class="tool-item">
            <span class="tool-icon">üìä</span>
            <div class="tool-info">
              <h4>get_knowledge_stats</h4>
              <p>Get database statistics</p>
            </div>
          </li>
          <li class="tool-item">
            <span class="tool-icon">üåê</span>
            <div class="tool-info">
              <h4>fetch_webpage</h4>
              <p>Fetch external webpage content</p>
            </div>
          </li>
        </ul>
      </div>

      <div class="info-card">
        <h3>‚ÑπÔ∏è About</h3>
        <p style="font-size: 0.9rem; color: #6b7280; line-height: 1.6;">
          This agent uses <strong>autonomous tool calling</strong> to intelligently decide which tools to use based on your questions. 
          It can chain multiple tools together and iterate until it has a complete answer.
        </p>
        <div class="action-buttons">
          <button class="action-btn" onclick="resetAgent()">‚ôªÔ∏è Reset</button>
          <button class="action-btn" onclick="showHelp()">‚ùì Help</button>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();
  let messageCount = 0;
  let totalTools = 0;
  let totalIterations = 0;

  // Connect to socket
  socket.on('connect', () => {
    console.log('‚úÖ Connected to MCP Agent');
    addSystemMessage('Connected to agent! Ready for questions.');
  });

  socket.on('disconnect', () => {
    console.log('‚ùå Disconnected from agent');
    addSystemMessage('Disconnected. Please refresh the page.');
  });

  // Handle typing indicator
  socket.on('mcp:typing', (data) => {
    if (data.isTyping) {
      showTypingIndicator();
    } else {
      hideTypingIndicator();
    }
  });

  // Handle agent response
  socket.on('mcp:response', (data) => {
    hideTypingIndicator();
    addAgentMessage(data.message, data.iterations, data.toolsUsed);
    
    // Update stats
    totalTools += data.toolsUsed;
    totalIterations += data.iterations;
    updateStats();
  });

  // Handle errors
  socket.on('mcp:error', (data) => {
    hideTypingIndicator();
    addSystemMessage('‚ùå Error: ' + data.error);
  });

  function sendMessage() {
    const input = document.getElementById('chatInput');
    const message = input.value.trim();
    
    if (!message) return;

    // Add user message
    addUserMessage(message);
    
    // Send to agent
    socket.emit('mcp:message', { message });
    
    // Clear input
    input.value = '';
    
    // Update stats
    messageCount++;
    updateStats();
  }

  function sendQuickPrompt(prompt) {
    document.getElementById('chatInput').value = prompt;
    sendMessage();
  }

  function handleKeyPress(event) {
    if (event.key === 'Enter') {
      sendMessage();
    }
  }

  function addUserMessage(text) {
    const messagesDiv = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message user-message';
    messageDiv.innerHTML = `
      <div class="message-avatar">üë§</div>
      <div class="message-content">
        <div class="message-bubble">${escapeHtml(text)}</div>
        <div class="message-meta">
          <span>${getTimestamp()}</span>
        </div>
      </div>
    `;
    messagesDiv.appendChild(messageDiv);
    scrollToBottom();
  }

  function addAgentMessage(text, iterations, toolsUsed) {
    const messagesDiv = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message agent-message';
    messageDiv.innerHTML = `
      <div class="message-avatar">üß†</div>
      <div class="message-content">
        <div class="message-bubble">${formatText(text)}</div>
        <div class="message-meta">
          <span>${getTimestamp()}</span>
          ${iterations > 0 ? `<span class="iteration-badge">‚ö° ${iterations} iteration${iterations > 1 ? 's' : ''}</span>` : ''}
          ${toolsUsed > 0 ? `<span class="tool-badge">üîß ${toolsUsed} tool${toolsUsed > 1 ? 's' : ''}</span>` : ''}
        </div>
      </div>
    `;
    messagesDiv.appendChild(messageDiv);
    scrollToBottom();
  }

  function addSystemMessage(text) {
    const messagesDiv = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message system-message';
    messageDiv.innerHTML = `
      <div class="message-avatar">‚ÑπÔ∏è</div>
      <div class="message-content">
        <div class="message-bubble">${escapeHtml(text)}</div>
      </div>
    `;
    messagesDiv.appendChild(messageDiv);
    scrollToBottom();
  }

  function showTypingIndicator() {
    const existing = document.getElementById('typingIndicator');
    if (existing) return;

    const messagesDiv = document.getElementById('chatMessages');
    const typingDiv = document.createElement('div');
    typingDiv.id = 'typingIndicator';
    typingDiv.className = 'message agent-message';
    typingDiv.innerHTML = `
      <div class="message-avatar">üß†</div>
      <div class="message-content">
        <div class="typing-indicator">
          <div class="typing-dot"></div>
          <div class="typing-dot"></div>
          <div class="typing-dot"></div>
        </div>
      </div>
    `;
    messagesDiv.appendChild(typingDiv);
    scrollToBottom();
  }

  function hideTypingIndicator() {
    const indicator = document.getElementById('typingIndicator');
    if (indicator) {
      indicator.remove();
    }
  }

  function clearChat() {
    const messagesDiv = document.getElementById('chatMessages');
    messagesDiv.innerHTML = `
      <div class="message system-message">
        <div class="message-avatar">‚ÑπÔ∏è</div>
        <div class="message-content">
          <div class="message-bubble">
            Chat cleared. Start a new conversation!
          </div>
        </div>
      </div>
    `;
    messageCount = 0;
    totalTools = 0;
    totalIterations = 0;
    updateStats();
  }

  function resetAgent() {
    fetch('/api/mcp/reset', { method: 'POST' })
      .then(res => res.json())
      .then(data => {
        addSystemMessage('‚úÖ Agent conversation reset');
        clearChat();
      })
      .catch(err => {
        addSystemMessage('‚ùå Failed to reset agent');
      });
  }

  function showHelp() {
    addSystemMessage(`
      <strong>How to use:</strong><br>
      ‚Ä¢ Type your question and press Enter or click Send<br>
      ‚Ä¢ The agent will automatically decide which tools to use<br>
      ‚Ä¢ Watch the badges to see iterations and tools used<br>
      ‚Ä¢ Use quick prompts above for common queries<br>
      ‚Ä¢ Click Reset to start a fresh conversation
    `);
  }

  function updateStats() {
    document.getElementById('statMessages').textContent = messageCount;
    document.getElementById('statTools').textContent = totalTools;
    document.getElementById('statIterations').textContent = totalIterations;
  }

  function scrollToBottom() {
    const messagesDiv = document.getElementById('chatMessages');
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
  }

  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  function formatText(text) {
    let formatted = escapeHtml(text);
    // Bold text
    formatted = formatted.replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>');
    // Links
    formatted = formatted.replace(/(https?:\/\/[^\s]+)/g, '<a href="$1" target="_blank" style="color: #667eea;">$1</a>');
    // Line breaks
    formatted = formatted.replace(/\n/g, '<br>');
    return formatted;
  }

  function getTimestamp() {
    const now = new Date();
    return now.toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  // Focus input on load
  document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('chatInput').focus();
  });
</script>

<%- include('../partials/footer') %>
