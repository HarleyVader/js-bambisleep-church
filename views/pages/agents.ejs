<%- include('../partials/header') %>

<style>
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }

    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes typing {

    0%,
    60%,
    100% {
      transform: translateY(0);
      opacity: 0.4;
    }

    30% {
      transform: translateY(-10px);
      opacity: 1;
    }
  }

  @keyframes pulseStatus {

    0%,
    100% {
      opacity: 1;
    }

    50% {
      opacity: 0.5;
    }
  }

  .agent-responsive-grid {
    display: grid;
    grid-template-columns: 1fr 350px;
    gap: 2rem;
    margin-bottom: 3rem;
  }

  @media (max-width: 968px) {
    .agent-responsive-grid {
      grid-template-columns: 1fr !important;
    }
  }

  .quick-prompts-container {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-content: center;
    margin-bottom: 2rem;
  }
</style>

<section class="hero">
  <h2>🧠 AI Agent Chat</h2>
  <p class="lead">Powered by LMStudio with autonomous MCP tool calling - Ask me anything about BambiSleep!</p>
</section>

<div class="container" style="margin-top: 2rem;">
  <div class="quick-prompts-container">
    <button class="btn" onclick="sendQuickPrompt('What BambiSleep files are available?')" style="margin: 0;">📚 Show Files</button>
    <button class="btn" onclick="sendQuickPrompt('Give me statistics about the knowledge base')" style="margin: 0;">📊 Show Stats</button>
    <button class="btn" onclick="sendQuickPrompt('Fetch content from https://bambisleep.info')" style="margin: 0;">🌐 Fetch Webpage</button>
    <button class="btn" onclick="sendQuickPrompt('Find files about sleep triggers')" style="margin: 0;">🔍 Find Triggers</button>
  </div>

  <div class="agent-responsive-grid">
    <!-- Chat Container -->
    <div style="background: var(--dark-card); border-radius: 10px; border: 2px solid var(--primary); overflow: hidden; display: flex; flex-direction: column; height: 600px; box-shadow: 0 0 20px rgba(255, 0, 255, 0.2);">
      <div style="background: var(--gradient-purple); color: var(--text); padding: 1.5rem; display: flex; justify-content: space-between; align-items: center; border-bottom: 2px solid var(--secondary);">
        <h3 style="margin: 0; display: flex; align-items: center; gap: 0.75rem; font-family: var(--font-heading); color: var(--text);">
          <span style="width: 12px; height: 12px; border-radius: 50%; background: var(--accent-success); animation: pulseStatus 2s infinite; box-shadow: 0 0 10px var(--accent-success);"></span>
          MCP Agent Online
        </h3>
        <button onclick="clearChat()" style="background: rgba(255, 255, 255, 0.1); border: 1px solid rgba(255, 255, 255, 0.3); color: var(--text); padding: 0.5rem 1rem; border-radius: 5px; cursor: pointer; transition: all 0.3s; font-weight: bold;">
          🗑️ Clear
        </button>
      </div>

      <div id="chatMessages" style="flex: 1; overflow-y: auto; padding: 1.5rem; background: var(--dark);">
        <div style="display: flex; gap: 1rem; margin-bottom: 1.5rem;">
          <div style="width: 40px; height: 40px; border-radius: 50%; background: var(--gradient-purple); display: flex; align-items: center; justify-content: center; font-size: 1.5rem; flex-shrink: 0; box-shadow: 0 0 15px var(--secondary-blue);">ℹ️</div>
          <div style="flex: 1;">
            <div style="background: var(--dark-card); padding: 1rem; border-radius: 10px; border: 1px solid var(--secondary); color: var(--text-light);">
              Welcome to the MCP Agent! I can help you search the BambiSleep knowledge base, fetch webpage content, and provide statistics. Just ask me anything!
            </div>
          </div>
        </div>
      </div>

      <div style="padding: 1.5rem; background: var(--dark-card); border-top: 2px solid var(--primary);">
        <div style="display: flex; gap: 1rem;">
          <input type="text" id="chatInput" placeholder="Ask me anything about BambiSleep..." onkeypress="handleKeyPress(event)" style="flex: 1; padding: 0.75rem 1rem; background: var(--dark); border: 2px solid var(--primary); border-radius: 8px; color: var(--text); font-size: 1rem; font-family: var(--font-primary); transition: all 0.3s;">
          <button id="sendButton" onclick="sendMessage()" class="btn" style="margin: 0; white-space: nowrap; box-shadow: 0 0 15px rgba(255, 0, 255, 0.3);">
            Send 🚀
          </button>
        </div>
      </div>
    </div>

    <!-- Sidebar -->
    <div style="display: flex; flex-direction: column; gap: 1.5rem;">
      <!-- Stats Card -->
      <div style="background: var(--dark-card); border-radius: 10px; border: 2px solid var(--secondary-blue); padding: 1.5rem; box-shadow: 0 0 15px rgba(102, 126, 234, 0.2);">
        <h3 style="color: var(--secondary); margin-bottom: 1rem; font-family: var(--font-heading); display: flex; align-items: center; gap: 0.5rem;">
          📊 Session Stats
        </h3>
        <div style="display: flex; justify-content: space-between; padding: 0.75rem 0; border-bottom: 1px solid rgba(255, 255, 255, 0.1);">
          <span style="color: var(--text-muted);">Messages</span>
          <span id="statMessages" style="color: var(--primary); font-weight: bold; font-size: 1.2rem;">0</span>
        </div>
        <div style="display: flex; justify-content: space-between; padding: 0.75rem 0; border-bottom: 1px solid rgba(255, 255, 255, 0.1);">
          <span style="color: var(--text-muted);">Tools Used</span>
          <span id="statTools" style="color: var(--secondary); font-weight: bold; font-size: 1.2rem;">0</span>
        </div>
        <div style="display: flex; justify-content: space-between; padding: 0.75rem 0;">
          <span style="color: var(--text-muted);">Iterations</span>
          <span id="statIterations" style="color: var(--accent); font-weight: bold; font-size: 1.2rem;">0</span>
        </div>
      </div>

      <!-- MCP Orchestration Status Card -->
      <div style="background: var(--dark-card); border-radius: 10px; border: 2px solid var(--primary); padding: 1.5rem; box-shadow: 0 0 15px rgba(255, 0, 255, 0.2);">
        <h3 style="color: var(--primary); margin-bottom: 1rem; font-family: var(--font-heading); display: flex; align-items: center; gap: 0.5rem;">
          🔗 MCP Orchestration
        </h3>
        <div id="mcpServerStatus" style="display: flex; flex-direction: column; gap: 0.5rem;">
          <div style="display: flex; justify-content: space-between; padding: 0.5rem 0; border-bottom: 1px solid rgba(255, 255, 255, 0.1);">
            <span style="color: var(--text-muted); font-size: 0.9rem;">Loading servers...</span>
          </div>
        </div>
        <div style="margin-top: 1rem; padding-top: 1rem; border-top: 1px solid rgba(255, 255, 255, 0.1);">
          <div style="display: flex; justify-content: space-between; align-items: center;">
            <span style="color: var(--text-muted); font-size: 0.9rem;">Total Tools:</span>
            <span id="totalToolsCount" style="color: var(--secondary); font-weight: bold;">-</span>
          </div>
        </div>
        <button onclick="refreshMcpStatus()" style="width: 100%; margin-top: 1rem; padding: 0.5rem; background: var(--primary); color: var(--dark); border: none; border-radius: 5px; cursor: pointer; font-weight: bold; transition: all 0.3s;">
          🔄 Refresh Status
        </button>
      </div>

      <!-- Tools Card -->
      <div style="background: var(--dark-card); border-radius: 10px; border: 2px solid var(--secondary); padding: 1.5rem; box-shadow: 0 0 15px rgba(0, 255, 255, 0.2);">
        <h3 style="color: var(--secondary); margin-bottom: 1rem; font-family: var(--font-heading);">🔧 Available Tools</h3>
        <div style="display: flex; flex-direction: column; gap: 0.75rem;">
          <div style="background: linear-gradient(135deg, rgba(0, 255, 255, 0.05), rgba(0, 255, 255, 0.1)); padding: 0.75rem; border-radius: 8px; border-left: 3px solid var(--primary-cyan); transition: all 0.3s;">
            <div style="font-weight: bold; color: var(--primary-cyan); margin-bottom: 0.25rem; font-size: 0.95rem;">🔍 search_knowledge</div>
            <div style="font-size: 0.85rem; color: var(--text-muted);">Search BambiSleep knowledge base</div>
          </div>
          <div style="background: linear-gradient(135deg, rgba(0, 255, 255, 0.05), rgba(0, 255, 255, 0.1)); padding: 0.75rem; border-radius: 8px; border-left: 3px solid var(--secondary-green); transition: all 0.3s;">
            <div style="font-weight: bold; color: var(--secondary-green); margin-bottom: 0.25rem; font-size: 0.95rem;">📊 get_knowledge_stats</div>
            <div style="font-size: 0.85rem; color: var(--text-muted);">Get database statistics</div>
          </div>
          <div style="background: linear-gradient(135deg, rgba(0, 255, 255, 0.05), rgba(0, 255, 255, 0.1)); padding: 0.75rem; border-radius: 8px; border-left: 3px solid var(--tertiary-blue); transition: all 0.3s;">
            <div style="font-weight: bold; color: var(--tertiary-blue); margin-bottom: 0.25rem; font-size: 0.95rem;">🌐 fetch_webpage</div>
            <div style="font-size: 0.85rem; color: var(--text-muted);">Fetch external webpage content</div>
          </div>
        </div>
      </div>

      <!-- About Card -->
      <div style="background: var(--dark-card); border-radius: 10px; border: 2px solid var(--accent); padding: 1.5rem; box-shadow: 0 0 15px rgba(255, 0, 110, 0.2);">
        <h3 style="color: var(--accent); margin-bottom: 1rem; font-family: var(--font-heading);">ℹ️ About Agent</h3>
        <p style="font-size: 0.9rem; color: var(--text-muted); line-height: 1.6; margin-bottom: 1rem;">
          This agent uses <strong style="color: var(--primary);">autonomous tool calling</strong> to intelligently decide which tools to use based on your questions.
          It can chain multiple tools together and iterate until it has a complete answer.
        </p>
        <div style="display: flex; gap: 0.5rem;">
          <button onclick="resetAgent()" class="btn" style="flex: 1; margin: 0; font-size: 0.9rem;">♻️ Reset</button>
          <button onclick="showHelp()" class="btn" style="flex: 1; margin: 0; font-size: 0.9rem;">❓ Help</button>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();
  let messageCount = 0;
  let totalTools = 0;
  let totalIterations = 0;

  // Connect to socket
  socket.on('connect', () => {
    console.log('✅ Connected to MCP Agent');
    addSystemMessage('Connected to agent! Ready for questions.');
  });

  socket.on('disconnect', () => {
    console.log('❌ Disconnected from agent');
    addSystemMessage('Disconnected. Please refresh the page.');
  });

  // Handle typing indicator
  socket.on('mcp:typing', (data) => {
    if (data.isTyping) {
      showTypingIndicator();
    } else {
      hideTypingIndicator();
    }
  });

  // Handle agent response
  socket.on('mcp:response', (data) => {
    hideTypingIndicator();
    addAgentMessage(data.message, data.iterations, data.toolsUsed);

    // Update stats
    totalTools += data.toolsUsed;
    totalIterations += data.iterations;
    updateStats();
  });

  // Handle errors
  socket.on('mcp:error', (data) => {
    hideTypingIndicator();
    addSystemMessage('❌ Error: ' + data.error);
  });

  // Handle MCP status response
  socket.on('mcp:status:response', (data) => {
    updateMcpStatus(data);
  });

  // Handle MCP tools response
  socket.on('mcp:tools:response', (data) => {
    updateToolsCount(data.count);
  });

  // Handle MCP status/tools errors
  socket.on('mcp:status:error', (data) => {
    console.error('MCP Status Error:', data.error);
    updateMcpStatusError(data.error);
  });

  socket.on('mcp:tools:error', (data) => {
    console.error('MCP Tools Error:', data.error);
  });

  function sendMessage() {
    const input = document.getElementById('chatInput');
    const message = input.value.trim();

    if (!message) return;

    // Add user message
    addUserMessage(message);

    // Send to agent
    socket.emit('mcp:message', {
      message
    });

    // Clear input
    input.value = '';

    // Update stats
    messageCount++;
    updateStats();
  }

  function sendQuickPrompt(prompt) {
    document.getElementById('chatInput').value = prompt;
    sendMessage();
  }

  function handleKeyPress(event) {
    if (event.key === 'Enter') {
      sendMessage();
    }
  }

  function addUserMessage(text) {
    const messagesDiv = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    messageDiv.style.cssText = 'display: flex; gap: 1rem; margin-bottom: 1.5rem; animation: slideIn 0.3s ease-out;';
    messageDiv.innerHTML = `
      <div style="width: 40px; height: 40px; border-radius: 50%; background: linear-gradient(135deg, var(--primary), var(--primary-pink)); display: flex; align-items: center; justify-content: center; font-size: 1.5rem; flex-shrink: 0; box-shadow: 0 0 15px var(--primary);">👤</div>
      <div style="flex: 1;">
        <div style="background: linear-gradient(135deg, rgba(255, 0, 255, 0.1), rgba(204, 1, 116, 0.1)); padding: 1rem; border-radius: 10px; border: 1px solid var(--primary); color: var(--text-light); box-shadow: 0 2px 10px rgba(255, 0, 255, 0.1);">
          ${escapeHtml(text)}
        </div>
        <div style="margin-top: 0.5rem; font-size: 0.85rem; color: var(--text-muted);">
          ${getTimestamp()}
        </div>
      </div>
    `;
    messagesDiv.appendChild(messageDiv);
    scrollToBottom();
  }

  function addAgentMessage(text, iterations, toolsUsed) {
    const messagesDiv = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    messageDiv.style.cssText = 'display: flex; gap: 1rem; margin-bottom: 1.5rem; animation: slideIn 0.3s ease-out;';
    messageDiv.innerHTML = `
      <div style="width: 40px; height: 40px; border-radius: 50%; background: var(--gradient-purple); display: flex; align-items: center; justify-content: center; font-size: 1.5rem; flex-shrink: 0; box-shadow: 0 0 15px var(--secondary-blue);">🧠</div>
      <div style="flex: 1;">
        <div style="background: var(--dark-card); padding: 1rem; border-radius: 10px; border: 1px solid var(--secondary); color: var(--text-light); box-shadow: 0 2px 10px rgba(0, 255, 255, 0.1);">
          ${formatText(text)}
        </div>
        <div style="margin-top: 0.5rem; display: flex; gap: 1rem; align-items: center; font-size: 0.85rem; color: var(--text-muted); flex-wrap: wrap;">
          <span>${getTimestamp()}</span>
          ${iterations > 0 ? `<span style="background: linear-gradient(135deg, var(--secondary-blue), var(--secondary-purple)); color: var(--text); padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.75rem; font-weight: bold; box-shadow: 0 2px 5px rgba(102, 126, 234, 0.3);">⚡ ${iterations} iteration${iterations > 1 ? 's' : ''}</span>` : ''}
          ${toolsUsed > 0 ? `<span style="background: linear-gradient(135deg, var(--primary), var(--primary-pink)); color: var(--text); padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.75rem; font-weight: bold; box-shadow: 0 2px 5px rgba(255, 0, 255, 0.3);">🔧 ${toolsUsed} tool${toolsUsed > 1 ? 's' : ''}</span>` : ''}
        </div>
      </div>
    `;
    messagesDiv.appendChild(messageDiv);
    scrollToBottom();
  }

  function addSystemMessage(text) {
    const messagesDiv = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    messageDiv.style.cssText = 'display: flex; gap: 1rem; margin-bottom: 1.5rem;';
    messageDiv.innerHTML = `
      <div style="width: 40px; height: 40px; border-radius: 50%; background: var(--gradient-purple); display: flex; align-items: center; justify-content: center; font-size: 1.5rem; flex-shrink: 0; box-shadow: 0 0 15px var(--accent);">ℹ️</div>
      <div style="flex: 1;">
        <div style="background: linear-gradient(135deg, rgba(255, 0, 110, 0.1), rgba(255, 0, 110, 0.05)); padding: 1rem; border-radius: 10px; border: 1px solid var(--accent); color: var(--text-light);">
          ${text}
        </div>
      </div>
    `;
    messagesDiv.appendChild(messageDiv);
    scrollToBottom();
  }

  function showTypingIndicator() {
    const existing = document.getElementById('typingIndicator');
    if (existing) return;

    const messagesDiv = document.getElementById('chatMessages');
    const typingDiv = document.createElement('div');
    typingDiv.id = 'typingIndicator';
    typingDiv.style.cssText = 'display: flex; gap: 1rem; margin-bottom: 1.5rem;';
    typingDiv.innerHTML = `
      <div style="width: 40px; height: 40px; border-radius: 50%; background: var(--gradient-purple); display: flex; align-items: center; justify-content: center; font-size: 1.5rem; flex-shrink: 0; box-shadow: 0 0 15px var(--secondary-blue);">🧠</div>
      <div style="flex: 1;">
        <div style="background: var(--dark-card); padding: 1rem; border-radius: 10px; border: 1px solid var(--secondary); display: flex; gap: 0.5rem; align-items: center;">
          <div style="width: 8px; height: 8px; border-radius: 50%; background: var(--secondary); animation: typing 1.4s infinite;"></div>
          <div style="width: 8px; height: 8px; border-radius: 50%; background: var(--primary); animation: typing 1.4s infinite 0.2s;"></div>
          <div style="width: 8px; height: 8px; border-radius: 50%; background: var(--accent); animation: typing 1.4s infinite 0.4s;"></div>
        </div>
      </div>
    `;
    messagesDiv.appendChild(typingDiv);
    scrollToBottom();
  }

  function hideTypingIndicator() {
    const indicator = document.getElementById('typingIndicator');
    if (indicator) {
      indicator.remove();
    }
  }

  function clearChat() {
    const messagesDiv = document.getElementById('chatMessages');
    messagesDiv.innerHTML = `
      <div style="display: flex; gap: 1rem; margin-bottom: 1.5rem;">
        <div style="width: 40px; height: 40px; border-radius: 50%; background: var(--gradient-purple); display: flex; align-items: center; justify-content: center; font-size: 1.5rem; flex-shrink: 0; box-shadow: 0 0 15px var(--secondary);">ℹ️</div>
        <div style="flex: 1;">
          <div style="background: var(--dark-card); padding: 1rem; border-radius: 10px; border: 1px solid var(--secondary); color: var(--text-light);">
            Chat cleared. Start a new conversation!
          </div>
        </div>
      </div>
    `;
    messageCount = 0;
    totalTools = 0;
    totalIterations = 0;
    updateStats();
  }

  function resetAgent() {
    fetch('/api/mcp/reset', {
        method: 'POST'
      })
      .then(res => res.json())
      .then(data => {
        addSystemMessage('✅ Agent conversation reset');
        clearChat();
      })
      .catch(err => {
        addSystemMessage('❌ Failed to reset agent');
      });
  }

  function showHelp() {
    addSystemMessage(`
      <strong style="color: var(--primary);">How to use the MCP Agent:</strong><br><br>
      • <strong style="color: var(--secondary);">Type your question</strong> and press Enter or click Send<br>
      • The agent will <strong style="color: var(--accent);">automatically decide</strong> which tools to use<br>
      • Watch the <strong style="color: var(--tertiary-pink);">badges</strong> to see iterations and tools used<br>
      • Use <strong style="color: var(--tertiary-green);">quick prompts</strong> above for common queries<br>
      • Click <strong style="color: var(--tertiary-blue);">Reset</strong> to start a fresh conversation
    `);
  }

  function updateStats() {
    document.getElementById('statMessages').textContent = messageCount;
    document.getElementById('statTools').textContent = totalTools;
    document.getElementById('statIterations').textContent = totalIterations;
  }

  function scrollToBottom() {
    const messagesDiv = document.getElementById('chatMessages');
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
  }

  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  function formatText(text) {
    let formatted = escapeHtml(text);
    // Bold text
    formatted = formatted.replace(/\*\*(.+?)\*\*/g, '<strong style="color: var(--primary);">$1</strong>');
    // Links
    formatted = formatted.replace(/(https?:\/\/[^\s]+)/g, '<a href="$1" target="_blank" style="color: var(--secondary); text-decoration: underline;">$1</a>');
    // Line breaks
    formatted = formatted.replace(/\n/g, '<br>');
    return formatted;
  }

  function getTimestamp() {
    const now = new Date();
    return now.toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  // MCP Orchestration Status Functions
  function refreshMcpStatus() {
    console.log('🔄 Refreshing MCP status...');
    socket.emit('mcp:status', {});
    socket.emit('mcp:tools', {});
  }

  function updateMcpStatus(data) {
    const statusDiv = document.getElementById('mcpServerStatus');
    let html = '';

    if (data.orchestrator) {
      for (const [serverName, serverInfo] of Object.entries(data.orchestrator)) {
        const healthColor = serverInfo.health === 'healthy' ? 'var(--accent-success)' :
          serverInfo.health === 'unhealthy' ? 'var(--accent-warning)' : 'var(--text-muted)';

        const healthIcon = serverInfo.health === 'healthy' ? '✅' :
          serverInfo.health === 'unhealthy' ? '❌' : '❓';

        html += `
          <div style="display: flex; justify-content: space-between; align-items: center; padding: 0.5rem 0; border-bottom: 1px solid rgba(255, 255, 255, 0.1);">
            <div style="display: flex; flex-direction: column; flex: 1;">
              <span style="color: var(--text); font-size: 0.9rem; font-weight: bold;">${serverName}</span>
              <span style="color: var(--text-muted); font-size: 0.75rem;">${serverInfo.tools?.length || 0} tools</span>
            </div>
            <div style="display: flex; align-items: center; gap: 0.5rem;">
              <span style="color: ${healthColor}; font-size: 0.8rem;">${serverInfo.health || 'unknown'}</span>
              <span style="font-size: 1rem;">${healthIcon}</span>
            </div>
          </div>
        `;
      }
    }

    if (html === '') {
      html = '<div style="color: var(--text-muted); font-size: 0.9rem; padding: 0.5rem 0;">No servers configured</div>';
    }

    statusDiv.innerHTML = html;
    console.log('✅ MCP status updated');
  }

  function updateMcpStatusError(error) {
    const statusDiv = document.getElementById('mcpServerStatus');
    statusDiv.innerHTML = `<div style="color: var(--accent-warning); font-size: 0.9rem; padding: 0.5rem 0;">❌ Error: ${error}</div>`;
  }

  function updateToolsCount(count) {
    document.getElementById('totalToolsCount').textContent = count;
  }

  // Auto-refresh MCP status on load and periodically
  document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('chatInput').focus();

    // Initial MCP status load
    setTimeout(() => {
      refreshMcpStatus();
    }, 1000);

    // Refresh MCP status every 30 seconds
    setInterval(() => {
      refreshMcpStatus();
    }, 30000);
  });

  // Add hover effect to input
  const chatInput = document.getElementById('chatInput');
  chatInput.addEventListener('focus', () => {
    chatInput.style.borderColor = 'var(--secondary)';
    chatInput.style.boxShadow = '0 0 20px rgba(0, 255, 255, 0.3)';
  });
  chatInput.addEventListener('blur', () => {
    chatInput.style.borderColor = 'var(--primary)';
    chatInput.style.boxShadow = 'none';
  });
</script>

<%- include('../partials/footer') %>
