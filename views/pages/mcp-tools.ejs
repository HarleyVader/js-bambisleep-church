<%- include('../partials/header') %>

<style>
  .mcp-tools-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .mcp-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .mcp-title {
    font-family: 'Orbitron', monospace;
    font-size: 2.5rem;
    color: var(--primary);
    margin-bottom: 1rem;
    text-shadow: 0 0 20px var(--primary);
  }

  .mcp-subtitle {
    color: var(--text-muted);
    font-size: 1.2rem;
    margin-bottom: 2rem;
  }

  .status-indicator {
    display: inline-block;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-weight: bold;
    margin: 0.5rem;
  }

  .status-online {
    background: rgba(16, 185, 129, 0.2);
    color: #10b981;
    border: 1px solid #10b981;
  }

  .status-offline {
    background: rgba(239, 68, 68, 0.2);
    color: #ef4444;
    border: 1px solid #ef4444;
  }

  .tools-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
    margin: 3rem 0;
  }

  .tool-card {
    background: rgba(26, 26, 26, 0.8);
    border: 1px solid var(--primary);
    border-radius: 15px;
    padding: 2rem;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .tool-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 30px rgba(255, 0, 255, 0.3);
    border-color: var(--secondary);
  }

  .tool-card::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(255, 0, 255, 0.05) 0%, transparent 70%);
    animation: pulse 4s ease-in-out infinite;
  }

  .tool-name {
    font-family: 'Orbitron', monospace;
    color: var(--secondary);
    font-size: 1.3rem;
    margin-bottom: 1rem;
    position: relative;
    z-index: 2;
  }

  .tool-description {
    color: var(--text-muted);
    margin-bottom: 1.5rem;
    line-height: 1.6;
    position: relative;
    z-index: 2;
  }

  .tool-form {
    position: relative;
    z-index: 2;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-label {
    display: block;
    color: var(--text);
    font-weight: 600;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .form-input,
  .form-select,
  .form-textarea {
    width: 100%;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.5);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 5px;
    color: var(--text);
    font-family: inherit;
    transition: all 0.3s ease;
  }

  .form-input:focus,
  .form-select:focus,
  .form-textarea:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 10px rgba(255, 0, 255, 0.3);
  }

  .checkbox-group {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 0.5rem;
  }

  .checkbox-item {
    display: flex;
    align-items: center;
    background: rgba(0, 0, 0, 0.3);
    padding: 0.5rem;
    border-radius: 5px;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .checkbox-item input[type="checkbox"] {
    margin-right: 0.5rem;
    accent-color: var(--primary);
  }

  .execute-btn {
    background: linear-gradient(135deg, var(--primary), var(--secondary));
    border: none;
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 25px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    width: 100%;
    margin-top: 1rem;
  }

  .execute-btn:hover {
    transform: scale(1.05);
    box-shadow: 0 8px 25px rgba(255, 0, 255, 0.4);
  }

  .execute-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .result-container {
    margin-top: 1.5rem;
    padding: 1rem;
    background: rgba(0, 0, 0, 0.6);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    display: none;
  }

  .result-container.show {
    display: block;
  }

  .result-title {
    color: var(--secondary);
    font-weight: bold;
    margin-bottom: 0.5rem;
  }

  .result-content {
    color: var(--text);
    white-space: pre-wrap;
    line-height: 1.6;
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
    max-height: 300px;
    overflow-y: auto;
  }

  .error-result {
    border-color: #ef4444;
    background: rgba(239, 68, 68, 0.1);
  }

  .error-result .result-title {
    color: #ef4444;
  }

  .info-section {
    background: rgba(21, 170, 181, 0.1);
    border: 1px solid rgba(21, 170, 181, 0.3);
    border-radius: 10px;
    padding: 2rem;
    margin: 3rem 0;
  }

  .info-title {
    color: var(--secondary);
    font-size: 1.5rem;
    margin-bottom: 1rem;
  }

  .connection-info {
    background: rgba(0, 0, 0, 0.3);
    padding: 1rem;
    border-radius: 8px;
    margin: 1rem 0;
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
  }
</style>

<div class="mcp-tools-container">
  <div class="mcp-header">
    <h1 class="mcp-title">üîß MCP Tools Interface</h1>
    <p class="mcp-subtitle">Interactive testing for Model Context Protocol tools</p>

    <div class="status-section">
      <div id="mcpStatus" class="status-indicator status-offline">
        <span id="statusText">Checking Status...</span>
      </div>
      <button onclick="checkMcpStatus()" style="background: var(--accent); color: white; border: none; padding: 0.5rem 1rem; border-radius: 5px; cursor: pointer; margin-left: 1rem;">
        üîÑ Refresh Status
      </button>
    </div>
  </div>

  <% if (mcpEnabled) { %>
  <div class="tools-grid" id="toolsGrid">
    <!-- Tools will be loaded here by JavaScript -->
  </div>
  <% } else { %>
  <div class="info-section">
    <h2 class="info-title">‚ö†Ô∏è MCP Server Disabled</h2>
    <p>The MCP server is currently disabled. To enable it, set <code>MCP_ENABLED=true</code> in your environment variables and restart the server.</p>
  </div>
  <% } %>

  <div class="info-section">
    <h2 class="info-title">üì° MCP Connection Information</h2>
    <div id="connection-info-content">
      <p>Connect MCP clients to these endpoints (development mode only):</p>

      <div class="connection-info">
        <strong>HTTP Endpoint:</strong><br>
        POST http://localhost:<%= typeof PORT !== 'undefined' ? PORT : '7070' %>/mcp<br><br>

        <strong>VS Code Integration:</strong><br>
        <code>code --add-mcp "{\"name\":\"bambisleep-church\",\"type\":\"http\",\"url\":\"http://localhost:<%= typeof PORT !== 'undefined' ? PORT : '7070' %>/mcp\"}"</code><br><br>

        <strong>MCP Inspector:</strong><br>
        <code>npx @modelcontextprotocol/inspector</code><br>
        Then connect to: http://localhost:<%= typeof PORT !== 'undefined' ? PORT : '7070' %>/mcp<br><br>

        <strong>GitHub Repository:</strong><br>
        <a href="https://github.com/HarleyVader/js-bambisleep-church" target="_blank" style="color: var(--primary);">
          https://github.com/HarleyVader/js-bambisleep-church
        </a>
      </div>
    </div>
  </div>
</div>

<script>
  // Tool definitions for form generation
  const toolDefinitions = {
    'search-knowledge': {
      name: 'search-knowledge',
      description: 'Search the BambiSleep knowledge base for resources, guides, and information',
      parameters: [{
          name: 'query',
          type: 'text',
          required: true,
          description: 'Search query'
        },
        {
          name: 'category',
          type: 'select',
          options: ['', 'official', 'community', 'scripts', 'safety'],
          description: 'Filter by category (optional)'
        },
        {
          name: 'limit',
          type: 'number',
          default: 10,
          min: 1,
          max: 20,
          description: 'Maximum number of results'
        }
      ]
    },
    'get-safety-info': {
      name: 'get-safety-info',
      description: 'Get comprehensive safety information and guidelines for BambiSleep practice',
      parameters: [{
        name: 'topic',
        type: 'select',
        options: ['general', 'beginner', 'advanced', 'consent', 'risks', 'emergency'],
        default: 'general',
        description: 'Specific safety topic'
      }]
    },
    'church-status': {
      name: 'church-status',
      description: 'Get current status of BambiSleep Church development and establishment progress',
      parameters: [{
        name: 'detailed',
        type: 'checkbox',
        default: false,
        description: 'Include detailed progress information'
      }]
    },
    'community-guidelines': {
      name: 'community-guidelines',
      description: 'Access BambiSleep Church community guidelines, rules, and conduct standards',
      parameters: [{
        name: 'section',
        type: 'select',
        options: ['general', 'safety', 'conduct', 'moderation', 'privacy'],
        default: 'general',
        description: 'Specific guideline section'
      }]
    },
    'resource-recommendations': {
      name: 'resource-recommendations',
      description: 'Get personalized BambiSleep resource recommendations based on experience and interests',
      parameters: [{
          name: 'experience',
          type: 'select',
          options: ['beginner', 'intermediate', 'advanced'],
          required: true,
          description: 'Experience level with BambiSleep'
        },
        {
          name: 'interests',
          type: 'checkbox-group',
          options: ['safety', 'community', 'scripts', 'creativity', 'spirituality'],
          description: 'Areas of interest'
        },
        {
          name: 'safetyFocus',
          type: 'checkbox',
          default: true,
          description: 'Emphasize safety resources'
        }
      ]
    }
  };

  // Check if we're on production or development
  function isProduction() {
    return window.location.hostname.includes('bambisleep.church');
  }

  // Check MCP server status
  async function checkMcpStatus() {
    const statusElement = document.getElementById('mcpStatus');
    const statusText = document.getElementById('statusText');

    // If on production domain, show development instructions
    if (isProduction()) {
      statusElement.className = 'status-indicator status-offline';
      statusText.textContent = 'MCP Tools - Development Mode Only';

      // Show helpful message for production users
      const toolsGrid = document.getElementById('toolsGrid');
      if (toolsGrid) {
        toolsGrid.innerHTML = `
          <div style="text-align: center; padding: 3rem; background: rgba(255, 193, 7, 0.1); border: 1px solid #ffc107; border-radius: 10px; margin: 2rem 0;">
            <h3 style="color: #ffc107; margin-bottom: 1rem;">üöß Development Tools</h3>
            <p style="color: var(--text-muted); margin-bottom: 1.5rem;">
              MCP tools are available in development mode only. To test these features:
            </p>
            <div style="text-align: left; max-width: 600px; margin: 0 auto;">
              <ol style="color: var(--text); line-height: 1.6;">
                <li><strong>Clone the repository:</strong><br>
                    <code style="background: rgba(0,0,0,0.3); padding: 0.3rem; border-radius: 3px;">git clone https://github.com/HarleyVader/js-bambisleep-church.git</code>
                </li>
                <li><strong>Install dependencies:</strong><br>
                    <code style="background: rgba(0,0,0,0.3); padding: 0.3rem; border-radius: 3px;">npm install</code>
                </li>
                <li><strong>Start the development server:</strong><br>
                    <code style="background: rgba(0,0,0,0.3); padding: 0.3rem; border-radius: 3px;">npm start</code>
                </li>
                <li><strong>Access MCP tools at:</strong><br>
                    <code style="background: rgba(0,0,0,0.3); padding: 0.3rem; border-radius: 3px;">http://localhost:7070/mcp-tools</code>
                </li>
              </ol>
            </div>
            <p style="color: var(--text-muted); margin-top: 1.5rem; font-size: 0.9rem;">
              <strong>Features available in development:</strong><br>
              üîç Knowledge base search ‚Ä¢ üõ°Ô∏è Safety information ‚Ä¢ üèõÔ∏è Church status ‚Ä¢ üìã Community guidelines ‚Ä¢ üìö Resource recommendations
            </p>
          </div>
        `;
      }
      return;
    }

    // Development mode - try to connect to local MCP server
    try {
      statusText.textContent = 'Checking...';

      const response = await fetch('/api/mcp/status');

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();

      if (data.success) {
        statusElement.className = 'status-indicator status-online';
        statusText.textContent = `MCP Server Online (${data.mcp.toolCount} tools)`;
        loadTools();
      } else {
        throw new Error('Server not available');
      }
    } catch (error) {
      statusElement.className = 'status-indicator status-offline';
      statusText.textContent = 'MCP Server Offline (Check server: npm start)';
      console.error('MCP Status Error:', error);
    }
  } // Load and display tools
  function loadTools() {
    const toolsGrid = document.getElementById('toolsGrid');
    if (!toolsGrid) return;

    toolsGrid.innerHTML = '';

    Object.values(toolDefinitions).forEach(tool => {
      const toolCard = createToolCard(tool);
      toolsGrid.appendChild(toolCard);
    });
  }

  // Create tool card HTML
  function createToolCard(tool) {
    const card = document.createElement('div');
    card.className = 'tool-card';

    let parametersHTML = '';
    tool.parameters.forEach(param => {
      parametersHTML += createParameterHTML(param, tool.name);
    });

    card.innerHTML = `
      <h3 class="tool-name">${tool.name}</h3>
      <p class="tool-description">${tool.description}</p>
      <form class="tool-form" onsubmit="executeTool('${tool.name}', event)">
        ${parametersHTML}
        <button type="submit" class="execute-btn">Execute Tool</button>
      </form>
      <div id="result-${tool.name}" class="result-container">
        <div class="result-title">Result:</div>
        <div class="result-content"></div>
      </div>
    `;

    return card;
  }

  // Create parameter input HTML
  function createParameterHTML(param, toolName) {
    const fieldId = `${toolName}-${param.name}`;
    let inputHTML = '';

    switch (param.type) {
      case 'text':
        inputHTML = `<input type="text" id="${fieldId}" name="${param.name}" class="form-input" ${param.required ? 'required' : ''}>`;
        break;
      case 'number':
        inputHTML = `<input type="number" id="${fieldId}" name="${param.name}" class="form-input" min="${param.min || ''}" max="${param.max || ''}" value="${param.default || ''}">`;
        break;
      case 'select':
        const options = param.options.map(opt => `<option value="${opt}" ${opt === param.default ? 'selected' : ''}>${opt || '(none)'}</option>`).join('');
        inputHTML = `<select id="${fieldId}" name="${param.name}" class="form-select">${options}</select>`;
        break;
      case 'checkbox':
        inputHTML = `<input type="checkbox" id="${fieldId}" name="${param.name}" ${param.default ? 'checked' : ''}>`;
        break;
      case 'checkbox-group':
        const checkboxes = param.options.map(opt =>
          `<div class="checkbox-item">
            <input type="checkbox" id="${fieldId}-${opt}" name="${param.name}" value="${opt}">
            <label for="${fieldId}-${opt}">${opt}</label>
          </div>`
        ).join('');
        inputHTML = `<div class="checkbox-group">${checkboxes}</div>`;
        break;
    }

    return `
      <div class="form-group">
        <label for="${fieldId}" class="form-label">
          ${param.name}${param.required ? ' *' : ''}
        </label>
        ${inputHTML}
        ${param.description ? `<small style="color: var(--text-muted); font-size: 0.8rem;">${param.description}</small>` : ''}
      </div>
    `;
  }

  // Execute MCP tool
  async function executeTool(toolName, event) {
    event.preventDefault();

    const form = event.target;
    const resultContainer = document.getElementById(`result-${toolName}`);
    const resultContent = resultContainer.querySelector('.result-content');
    const submitBtn = form.querySelector('.execute-btn');

    // Disable button and show loading
    submitBtn.disabled = true;
    submitBtn.textContent = 'Executing...';
    resultContainer.className = 'result-container show';
    resultContent.textContent = 'Processing...';

    try {
      // Collect form data
      const formData = new FormData(form);
      const args = {};

      // Process form data based on parameter types
      const toolDef = toolDefinitions[toolName];
      toolDef.parameters.forEach(param => {
        if (param.type === 'checkbox-group') {
          args[param.name] = [];
          param.options.forEach(opt => {
            if (formData.get(param.name) && formData.getAll(param.name).includes(opt)) {
              args[param.name].push(opt);
            }
          });
        } else if (param.type === 'checkbox') {
          args[param.name] = formData.has(param.name);
        } else if (param.type === 'number') {
          const value = formData.get(param.name);
          if (value !== null && value !== '') {
            args[param.name] = parseInt(value);
          }
        } else {
          const value = formData.get(param.name);
          if (value !== null && value !== '') {
            args[param.name] = value;
          }
        }
      });

      // Check if on production - tools don't work there
      if (isProduction()) {
        throw new Error('MCP tools are only available in development mode. Please run the project locally.');
      }

      // Call MCP endpoint
      const response = await fetch('/mcp', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          jsonrpc: '2.0',
          id: Date.now(),
          method: 'tools/call',
          params: {
            name: toolName,
            arguments: args
          }
        })
      });

      const data = await response.json();

      if (data.error) {
        throw new Error(data.error.message);
      }

      // Display result
      if (data.result && data.result.content && data.result.content[0]) {
        resultContent.textContent = data.result.content[0].text;
        resultContainer.classList.remove('error-result');
      } else {
        throw new Error('Invalid response format');
      }

    } catch (error) {
      console.error('Tool execution error:', error);
      resultContent.textContent = `Error: ${error.message}`;
      resultContainer.classList.add('error-result');
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = 'Execute Tool';
    }
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', function() {
    checkMcpStatus();
    // Only load tools if not on production (development mode only)
    if (!isProduction()) {
      loadTools();
    }
  });
</script>

<%- include('../partials/footer') %>
