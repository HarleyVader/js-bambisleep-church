<%- include('../partials/header') %>

<main>
    <div class="unified-homepage">
        <!-- Hero Section -->
        <div class="hero-section">
            <h1 class="neon-text scan-line">KNOWLEDGE BASE</h1>
            <p class="hero-subtitle">Discover and explore collected wisdom</p>
            <div class="agent-status">
                <div class="status-indicator active"></div>
                <span>Knowledge Agent Active</span>
                <div class="agent-meta">
                    <span class="agent-info">Sources: Multiple Official & Community</span>
                    <span class="agent-info">Categories: 9</span>
                    <span class="agent-info">Last Updated: <span id="last-updated-date">June 14, 2025</span></span>
                </div>
            </div>
        </div>
        
        <!-- Knowledge Stats -->
        <div class="knowledge-stats">
            <div class="stat-card">
                <span class="stat-number" id="totalEntries">0</span>
                <span class="stat-label">Knowledge Entries</span>
            </div>
            <div class="stat-card">
                <span class="stat-number" id="totalCategories">0</span>
                <span class="stat-label">Categories</span>
            </div>
            <div class="stat-card">
                <span class="stat-number" id="lastUpdated">Never</span>
                <span class="stat-label">Last Updated</span>
            </div>
        </div>

        <!-- Knowledge Q&A Section -->
        <div class="knowledge-qa-section">
            <%- include('../components/knowledgeSearch') %>
        </div>
        
        <!-- Knowledge Categories -->
        <section class="knowledge-categories">
            <h2>Knowledge Categories</h2>
            <div class="category-badges">
                <div class="category-badge core">Core Concepts</div>
                <div class="category-badge technical">Technical</div>
                <div class="category-badge audience">Audience</div>
                <div class="category-badge usage">Usage</div>
                <div class="category-badge safety">Safety</div>
                <div class="category-badge practical">Practical</div>
                <div class="category-badge files">File Types</div>
                <div class="category-badge community">Community</div>
                <div class="category-badge resources">Resources</div>
            </div>
            <p class="category-info">Click on a category to filter common questions below, or ask anything in the search bar above.</p>
        </section>
        
        <!-- Common Questions -->
        <section class="common-questions">
            <h2>Common Questions</h2>
            <div class="question-cards">
                <!-- Core Information -->
                <div class="question-card category-core" data-question="What is BambiSleep?">
                    <h3>What is BambiSleep?</h3>
                    <p>Get a basic understanding of what BambiSleep is and what it offers.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <div class="question-card category-core" data-question="Who is BambiSleep?">
                    <h3>Who is BambiSleep?</h3>
                    <p>Learn about the creator and background of BambiSleep.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <div class="question-card category-core" data-question="Who are bambis?">
                    <h3>Who are Bambis?</h3>
                    <p>Understand who "bambis" are in the context of BambiSleep.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <!-- Technical Information -->
                <div class="question-card category-technical" data-question="How does BambiSleep work?">
                    <h3>How It Works</h3>
                    <p>Learn about the techniques and methods used in BambiSleep.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <div class="question-card category-technical" data-question="How does BambiSleep do what it does?">
                    <h3>Technical Details</h3>
                    <p>Explore the mechanisms and psychology behind BambiSleep.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <div class="question-card category-technical" data-question="What techniques does BambiSleep use?">
                    <h3>Methodology</h3>
                    <p>Discover the hypnotic techniques and approaches used in BambiSleep.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <!-- Audience Information -->
                <div class="question-card category-audience" data-question="Who is the target audience for BambiSleep?">
                    <h3>Target Audience</h3>
                    <p>Find out who BambiSleep is designed for.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <div class="question-card category-audience" data-question="Where does BambiSleep exist?">
                    <h3>Platforms & Websites</h3>
                    <p>Discover where to find BambiSleep content online.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <div class="question-card category-audience" data-question="Is BambiSleep right for me?">
                    <h3>Suitability</h3>
                    <p>Learn if BambiSleep might be appropriate for your interests.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <!-- Usage Information -->
                <div class="question-card category-usage" data-question="Why would someone want to listen to BambiSleep?">
                    <h3>Benefits</h3>
                    <p>Discover the potential benefits and reasons people listen to BambiSleep.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <div class="question-card category-usage" data-question="Why would someone NOT want to listen to BambiSleep?">
                    <h3>Contraindications</h3>
                    <p>Learn about situations where BambiSleep might not be appropriate.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <div class="question-card category-usage" data-question="What experiences do people have with BambiSleep?">
                    <h3>User Experiences</h3>
                    <p>Learn about common experiences people report with BambiSleep.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <!-- Safety Information -->
                <div class="question-card category-safety" data-question="What are the risks of BambiSleep?">
                    <h3>Risks & Safety</h3>
                    <p>Understand the potential risks and safety considerations.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <div class="question-card category-safety" data-question="What safety precautions should I take with BambiSleep?">
                    <h3>Safety Precautions</h3>
                    <p>Learn about recommended safety practices when using BambiSleep.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <div class="question-card category-safety" data-question="How can I use BambiSleep responsibly?">
                    <h3>Responsible Use</h3>
                    <p>Discover guidelines for responsible and safe usage.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <!-- Practical Information -->
                <div class="question-card category-practical" data-question="What do I need to listen to BambiSleep?">
                    <h3>Getting Started</h3>
                    <p>Learn what you need to start listening to BambiSleep.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <div class="question-card category-practical" data-question="How do I begin with BambiSleep?">
                    <h3>Beginner's Guide</h3>
                    <p>Get step-by-step guidance for newcomers to BambiSleep.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <!-- File Types Information -->
                <div class="question-card category-files" data-question="What types of files does BambiSleep offer?">
                    <h3>File Types</h3>
                    <p>Explore the different types of content available in BambiSleep.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <div class="question-card category-files" data-question="What's the difference between BambiSleep file types?">
                    <h3>File Differences</h3>
                    <p>Understand the differences between various BambiSleep content formats.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <!-- Community Information -->
                <div class="question-card category-community" data-question="What is the BambiSleep community like?">
                    <h3>Community</h3>
                    <p>Learn about the BambiSleep community and how to connect.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <div class="question-card category-community" data-question="Where can I discuss BambiSleep with others?">
                    <h3>Discussion Forums</h3>
                    <p>Find places to connect with other BambiSleep enthusiasts.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <!-- Resources Information -->
                <div class="question-card category-resources" data-question="What resources are available for beginners to BambiSleep?">
                    <h3>Beginner Resources</h3>
                    <p>Discover helpful resources for those new to BambiSleep.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
                
                <div class="question-card category-resources" data-question="What resources are available for advanced BambiSleep users?">
                    <h3>Advanced Resources</h3>
                    <p>Find resources for experienced BambiSleep users.</p>
                    <button class="ask-common-question">Ask</button>
                </div>
            </div>
        </section>        <!-- Scripts Preview Section -->
        <div class="scripts-preview-section">
            <h2 class="section-title">📝 Recent Text Scripts</h2>
            <p class="section-subtitle">Automatically extracted from BambiSleep wiki and community content</p>
            
            <div class="text-scripts-stats">
                <span class="stat-label">Total Scripts:</span>
                <span class="stat-value" id="text-scripts-count">-</span>
            </div>
            
            <div class="text-scripts-preview" id="text-scripts-preview">
                <p class="loading-text">Loading text scripts...</p>            </div>
        </div>

        <!-- Search Section -->
        <div class="knowledge-search">
            <div class="search-container">
                <input type="text" id="searchInput" placeholder="Search knowledge base..." class="search-input">
                <button onclick="searchKnowledge()" class="search-btn">🔍</button>
            </div>
            <div class="search-filters">
                <select id="categoryFilter" class="filter-select">
                    <option value="">All Categories</option>
                </select>
                <button onclick="clearSearch()" class="clear-btn">Clear</button>
            </div>
        </div>
        
        <!-- Knowledge Grid -->
        <div class="knowledge-grid" id="knowledgeGrid">
            <!-- Knowledge cards will be populated here -->
        </div>

        <!-- No Results Message -->
        <div class="no-results" id="noResults" style="display: none;">
            <p>No knowledge entries found.</p>
        </div>
        
        <!-- Knowledge Info Section -->
        <section class="knowledge-info">
            <h2>About This Knowledge Base</h2>
            <p>
              This knowledge base contains information about BambiSleep gathered from various sources, 
              primarily the official BambiSleep Wiki. The information is provided for educational purposes only.
            </p>
            <p>
              The agent continuously updates its knowledge by fetching and processing content from trusted 
              BambiSleep sources. It can answer questions based on this processed information.
            </p>
            <p>
              Key information points the agent can address include:
            </p>
            <ul class="info-list">
              <li><strong>Core Concepts:</strong> Basic explanations of BambiSleep, its creator, and terminology</li>
              <li><strong>Technical Details:</strong> How BambiSleep works, mechanisms, and methodology</li>
              <li><strong>Target Audience:</strong> Who BambiSleep is designed for and suitability information</li>
              <li><strong>Usage Information:</strong> Benefits, contraindications, and user experiences</li>
              <li><strong>Safety Considerations:</strong> Potential risks, precautions, and responsible use</li>
              <li><strong>Practical Information:</strong> Getting started guides and beginner tutorials</li>
              <li><strong>File Types:</strong> Different content formats and their specific purposes</li>
              <li><strong>Community Resources:</strong> Forums, social media, and discussion groups</li>
              <li><strong>Learning Resources:</strong> Guides for beginners and advanced users</li>
            </ul>
            
            <div class="agent-capabilities">
              <h3>Agent Capabilities</h3>
              <div class="capability-items">
                <div class="capability-item">
                  <span class="capability-icon">🔍</span>
                  <span class="capability-text">Searches across multiple trusted sources</span>
                </div>
                <div class="capability-item">
                  <span class="capability-icon">🧠</span>
                  <span class="capability-text">Provides context-aware answers</span>
                </div>
                <div class="capability-item">
                  <span class="capability-icon">📚</span>
                  <span class="capability-text">Categorizes information for easy discovery</span>
                </div>
                <div class="capability-item">
                  <span class="capability-icon">🔄</span>
                  <span class="capability-text">Regularly updates with new content</span>
                </div>
                <div class="capability-item">
                  <span class="capability-icon">📊</span>
                  <span class="capability-text">Indicates confidence level in answers</span>
                </div>
                <div class="capability-item">
                  <span class="capability-icon">🔗</span>
                  <span class="capability-text">Provides source references when available</span>
                </div>
              </div>
            </div>
            
            <div class="knowledge-disclaimer">
              <h3>Important Note</h3>
              <p>
                This knowledge agent provides information about BambiSleep based on available sources. The accuracy and completeness 
                of information may vary. For the most authoritative information, please visit the 
                <a href="https://bambisleep.info" target="_blank">official BambiSleep website</a>.
              </p>
              <p>
                If you would like to contribute to this knowledge base or report inaccuracies, please contact the site administrators.
              </p>
            </div>
        </section>
    </div>
</main>

<style>
.knowledge-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin: 2rem 0;
}

.stat-card {
    background: var(--color-overlay-purple);
    border: 1px solid var(--color-primary-cyan);
    border-radius: 8px;
    padding: 1.5rem;
    text-align: center;
    box-shadow: 0 0 10px var(--glow-cyan);
}

.stat-number {
    display: block;
    font-size: 2rem;
    font-weight: bold;
    color: var(--color-primary-green);
    margin-bottom: 0.5rem;
}

.stat-label {
    color: var(--color-text-secondary);
    text-transform: uppercase;
    font-size: 0.875rem;
}

/* Scripts Preview Section Styles */
.scripts-preview-section {
    margin: 2rem 0;
}

.section-title {
    color: var(--color-primary-cyan);
    margin-bottom: 0.5rem;
    text-align: center;
}

.section-subtitle {
    color: var(--color-text-secondary);
    margin-bottom: 1.5rem;
    text-align: center;
    font-size: 1rem;
}

.text-scripts-stats {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
    padding: 1rem;
    background: var(--color-overlay-purple);
    border: 1px solid var(--color-primary-cyan);
    border-radius: 8px;
}

.text-scripts-stats .stat-label {
    color: var(--color-text-secondary);
    font-weight: bold;
}

.text-scripts-stats .stat-value {
    color: var(--color-primary-cyan);
    font-size: 1.5rem;
    font-weight: bold;
}

.text-scripts-preview {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.text-script-item {
    background: var(--color-overlay-purple);
    border: 1px solid var(--color-primary-magenta);
    border-radius: 8px;
    padding: 1.5rem;
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
}

.text-script-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px var(--glow-magenta);
}

.script-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
}

.script-title {
    color: var(--color-primary-green);
    font-size: 1.25rem;
    font-weight: bold;
}

.script-relevance {
    color: var(--color-primary-cyan);
}

.script-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1rem;
    font-size: 0.875rem;
}

.script-category, .script-platform, .script-wordcount, .script-date {
    background: rgba(0, 0, 0, 0.2);
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    color: var(--color-text-secondary);
}

.platform-bambicloud {
    color: var(--color-primary-magenta);
}

.script-preview {
    color: var(--color-text-secondary);
    line-height: 1.4;
    font-size: 0.9rem;
    overflow: hidden;
    display: -webkit-box;    -webkit-line-clamp: 4;
    line-clamp: 4;
    -webkit-box-orient: vertical;
    margin-top: auto;
}

.scripts-more {
    grid-column: 1 / -1;
    text-align: center;
    padding: 1rem;
    background: var(--color-overlay-purple);
    border: 1px dashed var(--color-primary-cyan);
    border-radius: 8px;
}

.view-all-scripts-btn {
    background: var(--color-primary-magenta);
    color: var(--color-bg-dark);
    border: none;
    border-radius: 4px;
    padding: 0.5rem 1.5rem;
    margin-top: 0.5rem;
    cursor: pointer;
    font-weight: bold;
    transition: all 0.3s ease;
}

.view-all-scripts-btn:hover {
    background: var(--color-primary-cyan);
    box-shadow: 0 0 10px var(--glow-cyan);
}

.knowledge-search {
    background: var(--color-overlay-purple);
    border: 1px solid var(--color-primary-cyan);
    border-radius: 8px;
    padding: 1.5rem;
    margin: 2rem 0;
}

.search-container {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
}

.search-input {
    flex: 1;
    padding: 0.75rem;
    background: var(--color-bg-dark);
    border: 1px solid var(--color-primary-cyan);
    border-radius: 4px;
    color: var(--color-text-primary);
    font-size: 1rem;
}

.search-input:focus {
    outline: none;
    border-color: var(--color-primary-cyan);
    box-shadow: 0 0 5px var(--glow-cyan);
}

.search-btn {
    padding: 0.75rem 1rem;
    background: var(--color-primary-cyan);
    border: none;
    border-radius: 4px;
    color: var(--color-bg-dark);
    cursor: pointer;
    font-size: 1rem;
    font-weight: bold;
}

.search-btn:hover {
    background: var(--color-primary-green);
    box-shadow: 0 0 10px var(--glow-green);
}

.search-filters {
    display: flex;
    gap: 0.5rem;
    align-items: center;
}

.filter-select, .form-select {
    padding: 0.5rem;
    background: var(--color-bg-dark);
    border: 1px solid var(--color-primary-cyan);
    border-radius: 4px;
    color: var(--color-text-primary);
}

.clear-btn {
    padding: 0.5rem 1rem;
    background: var(--color-bg-dark);
    border: 1px solid var(--color-primary-cyan);
    border-radius: 4px;
    color: var(--color-text-primary);
    cursor: pointer;
}

.clear-btn:hover {
    border-color: var(--color-primary-green);
    color: var(--color-primary-green);
}

.knowledge-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 1.5rem;
    margin: 2rem 0;
}

.knowledge-card {
    background: var(--color-overlay-purple);
    border: 1px solid var(--color-primary-cyan);
    border-radius: 8px;
    padding: 1.5rem;
    transition: all 0.3s ease;
}

.knowledge-card:hover {
    border-color: var(--color-primary-magenta);
    box-shadow: 0 0 15px var(--glow-magenta);
}

.knowledge-title {
    color: var(--color-primary-cyan);
    font-size: 1.25rem;
    font-weight: bold;
    margin: 0 0 0.75rem 0;
}

.knowledge-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    font-size: 0.875rem;
    color: var(--color-text-secondary);
}

.knowledge-category {
    background: var(--glow-green);
    color: var(--color-primary-green);
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    text-transform: uppercase;
    font-weight: bold;
}

.knowledge-date {
    color: var(--color-text-secondary);
    opacity: 0.7;
}

.knowledge-content {
    color: var(--color-text-secondary);
    line-height: 1.6;
    margin-bottom: 1rem;
}

.knowledge-actions {
    display: flex;
    gap: 0.5rem;
    justify-content: flex-end;
}

.action-btn {
    padding: 0.25rem 0.5rem;
    background: transparent;
    border: 1px solid var(--color-primary-cyan);
    border-radius: 4px;
    color: var(--color-primary-cyan);
    cursor: pointer;
    font-size: 0.875rem;
    transition: all 0.3s ease;
}

.action-btn:hover {
    border-color: var(--color-primary-magenta);
    color: var(--color-primary-magenta);
    box-shadow: 0 0 5px var(--glow-magenta);
}

.no-results {
    text-align: center;
    padding: 3rem;
    color: var(--color-text-secondary);
    font-size: 1.125rem;
    opacity: 0.7;
}

.loading {
    text-align: center;
    padding: 2rem;
    color: var(--color-primary-cyan);
}

/* Knowledge Q&A Styles */
.knowledge-search-container {
    margin-bottom: var(--spacing-xl);
}

.search-form {
    margin-bottom: var(--spacing-lg);
}

.input-group {
    display: flex;
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-md);
}

.search-tips {
    font-size: var(--font-sm);
    color: var(--color-text-secondary);
    font-style: italic;
}

.results-container {
    margin-top: var(--spacing-xl);
}

.answer-card {
    background: rgba(10, 10, 10, 0.8);
    border: var(--border-thin) solid var(--color-primary-cyan);
    border-radius: var(--radius-lg);
    padding: var(--spacing-lg);
    box-shadow: var(--shadow-neon);
}

.answer-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--spacing-md);
    border-bottom: var(--border-thin) solid rgba(255, 255, 255, 0.1);
    padding-bottom: var(--spacing-sm);
}

.confidence-badge {
    padding: var(--spacing-xs) var(--spacing-sm);
    font-size: var(--font-xs);
    border-radius: var(--radius-sm);
    color: var(--color-text-secondary);
}

.confidence-badge.high {
    background: rgba(0, 255, 0, 0.2);
    border: var(--border-thin) solid var(--color-primary-green);
}

.confidence-badge.medium {
    background: rgba(255, 255, 0, 0.2);
    border: var(--border-thin) solid var(--color-primary-yellow);
}

.confidence-badge.low {
    background: rgba(255, 0, 0, 0.2);
    border: var(--border-thin) solid var(--platform-youtube);
}

.answer-content {
    line-height: 1.6;
    margin-bottom: var(--spacing-lg);
    white-space: pre-line;
}

.sources {
    margin: var(--spacing-lg) 0;
    padding: var(--spacing-md);
    background: rgba(255, 255, 255, 0.05);
    border-radius: var(--radius-md);
    border-left: var(--border-medium) solid var(--color-primary-magenta);
}

.knowledge-metadata {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-md);
    margin: var(--spacing-md) 0;
    font-size: var(--font-xs);
    color: var(--color-text-secondary);
}

.metadata-item {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
}

.metadata-label {
    font-weight: bold;
    color: var(--color-primary-magenta);
}

.suggested-questions {
    margin: var(--spacing-lg) 0;
    padding: var(--spacing-md);
    background: rgba(255, 255, 255, 0.05);
    border-radius: var(--radius-md);
}

.questions-list {
    list-style: none;
    padding: 0;
    margin: var(--spacing-md) 0 0 0;
}

.questions-list li {
    margin-bottom: var(--spacing-sm);
}

.suggested-question {
    color: var(--color-primary-cyan);
    text-decoration: none;
    transition: all var(--transition-fast);
}

.suggested-question:hover {
    color: var(--color-primary-magenta);
    text-decoration: underline;
}

.feedback-section {
    margin-top: var(--spacing-lg);
    padding-top: var(--spacing-md);
    border-top: var(--border-thin) solid rgba(255, 255, 255, 0.1);
}

.feedback-buttons {
    display: flex;
    gap: var(--spacing-md);
    margin-top: var(--spacing-sm);
}

.feedback-btn {
    padding: var(--spacing-xs) var(--spacing-md);
    background: rgba(255, 255, 255, 0.1);
    border: var(--border-thin) solid rgba(255, 255, 255, 0.2);
    border-radius: var(--radius-sm);
    color: var(--color-text-secondary);
    cursor: pointer;
    transition: all var(--transition-normal);
}

.feedback-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-2px);
}

.spinner {
    width: 40px;
    height: 40px;
    border: 4px solid rgba(0, 255, 255, 0.2);
    border-radius: 50%;
    border-top: 4px solid var(--color-primary-cyan);
    animation: spin 1s linear infinite;
    margin-bottom: var(--spacing-md);
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.error-message {
    padding: var(--spacing-md);
    background: rgba(255, 0, 0, 0.1);
    border-left: 4px solid var(--platform-youtube);
    color: var(--color-text-secondary);
    margin: var(--spacing-md) 0;
    border-radius: var(--radius-sm);
}

.knowledge-info-section {
    margin-top: var(--spacing-xl);
    padding: var(--spacing-md);
    background: rgba(255, 255, 255, 0.05);
    border-radius: var(--radius-md);
}

.agent-status {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 8px;
    padding: 0.5rem 1rem;
    margin-top: 1rem;
    justify-content: center;
}

.status-indicator {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: #ff5555;
}

.status-indicator.active {
    background: #55ff55;
    box-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
}

.agent-meta {
    display: flex;
    margin-left: 1rem;
    gap: 1rem;
    font-size: 0.8rem;
    color: var(--color-text-secondary);
}

.category-badges {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin: 1rem 0;
    justify-content: center;
}

.category-badge {
    padding: 0.5rem 1rem;
    border-radius: 20px;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid var(--color-primary-cyan);
    cursor: pointer;
    transition: all 0.3s ease;
}

.category-badge:hover, .category-badge.active {
    background: var(--color-primary-cyan);
    color: var(--color-bg-dark);
    transform: translateY(-2px);
}

.category-info {
    text-align: center;
    font-size: 0.9rem;
    color: var(--color-text-secondary);
    margin-bottom: 2rem;
}

.question-cards {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
    margin: 1.5rem 0;
}

.question-card {
    background: var(--color-overlay-purple);
    border: 1px solid var(--color-primary-cyan);
    border-radius: 8px;
    padding: 1rem;
    transition: all 0.3s ease;
}

.question-card:hover {
    transform: translateY(-5px);
    border-color: var(--color-primary-magenta);
    box-shadow: 0 0 15px var(--glow-magenta);
}

.question-card h3 {
    color: var(--color-primary-green);
    margin: 0 0 0.5rem 0;
    font-size: 1.1rem;
}

.question-card p {
    color: var(--color-text-secondary);
    font-size: 0.9rem;
    margin-bottom: 1rem;
}

.ask-common-question {
    background: var(--color-primary-cyan);
    border: none;
    border-radius: 4px;
    padding: 0.25rem 1rem;
    color: var(--color-bg-dark);
    cursor: pointer;
    font-weight: bold;
    font-size: 0.9rem;
    transition: all 0.3s ease;
}

.ask-common-question:hover {
    background: var(--color-primary-magenta);
}

.capability-items {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
}

.capability-item {
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid var(--color-primary-cyan);
    border-radius: 8px;
    padding: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.capability-icon {
    font-size: 1.5rem;
}

.knowledge-info h2, .knowledge-info h3 {
    color: var(--color-primary-cyan);
    margin: 1.5rem 0 1rem 0;
}

.knowledge-info p, .knowledge-info li {
    color: var(--color-text-secondary);
    line-height: 1.6;
}

.info-list {
    padding-left: 1.5rem;
    margin: 1rem 0;
}

.knowledge-disclaimer {
    margin-top: 2rem;
    padding: 1rem;
    background: rgba(255, 0, 0, 0.05);
    border-left: 3px solid var(--color-primary-magenta);
    border-radius: 4px;
}

.script-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.script-modal-content {
    background: var(--color-bg-dark);
    border: 1px solid var(--color-accent-magenta);
    border-radius: var(--radius-md);
    max-width: 80%;
    max-height: 80%;
    overflow-y: auto;
    padding: var(--spacing-lg);
    position: relative;
    box-shadow: 0 0 20px rgba(218, 112, 214, 0.4);
}

.script-modal-close {
    position: absolute;
    top: 10px;
    right: 15px;
    font-size: 24px;
    background: none;
    border: none;
    color: var(--color-text-secondary);
    cursor: pointer;
}

.script-modal-title {
    color: var(--color-accent-green);
    margin-bottom: var(--spacing-md);
    padding-right: 30px;
}

.script-modal-body {
    color: var(--color-text-primary);
    line-height: 1.6;
    margin-bottom: var(--spacing-md);
    white-space: pre-wrap;
}

.script-modal-footer {
    display: flex;
    justify-content: flex-end;
    margin-top: var(--spacing-md);
}

.script-ask-btn {
    background: var(--color-accent-cyan);
    color: var(--color-bg-dark);
    border: none;
    border-radius: var(--radius-sm);
    padding: 8px 16px;
    cursor: pointer;
    font-weight: bold;
}

.script-ask-btn:hover {
    background: var(--color-accent-magenta);
    box-shadow: 0 0 10px rgba(218, 112, 214, 0.4);
}

.view-all-scripts {
    background: var(--color-accent-magenta);
    color: var(--color-bg-dark);
    border: none;
    border-radius: var(--radius-sm);
    padding: 8px 16px;
    margin-top: 8px;
    cursor: pointer;
    font-weight: bold;
    transition: all 0.3s ease;
}

.view-all-scripts:hover {
    background: var(--color-accent-cyan);
    box-shadow: 0 0 10px rgba(0, 255, 255, 0.3);
}

@media (max-width: 768px) {
    .knowledge-stats {
        grid-template-columns: 1fr;
    }
    
    .knowledge-grid {
        grid-template-columns: 1fr;
    }
    
    .search-container {
        flex-direction: column;
    }
    
    .search-filters {
        flex-direction: column;
        align-items: stretch;
    }
    
    .text-scripts-preview {
        grid-template-columns: 1fr;
    }
    
    .question-cards {
        grid-template-columns: 1fr;
    }
    
    .capability-items {
        grid-template-columns: 1fr;
    }
}
</style>

<script>
let allKnowledge = [];
let filteredKnowledge = [];

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
    loadKnowledge();
    fetchTextScripts();
    checkAndInitializeKnowledge();
});

async function loadKnowledge() {
    try {
        const response = await fetch('/api/knowledge');
        const data = await response.json();
        
        if (data.success) {
            allKnowledge = data.entries || [];
            filteredKnowledge = [...allKnowledge];
            updateStats();
            updateCategories();
            renderKnowledge();
        } else {
            console.error('Failed to load knowledge:', data.error);
        }
    } catch (error) {
        console.error('Error loading knowledge:', error);
        document.getElementById('knowledgeGrid').innerHTML = '<div class="loading">Failed to load knowledge</div>';
    }
}

function updateStats() {
    document.getElementById('totalEntries').textContent = allKnowledge.length;
    
    const categories = new Set(allKnowledge.map(k => k.metadata?.category || 'general'));
    document.getElementById('totalCategories').textContent = categories.size;
    
    if (allKnowledge.length > 0) {
        const latest = allKnowledge.reduce((latest, current) => {
            return new Date(current.metadata?.createdAt || 0) > new Date(latest.metadata?.createdAt || 0) ? current : latest;
        });
        const date = new Date(latest.metadata?.createdAt).toLocaleDateString();
        document.getElementById('lastUpdated').textContent = date;
    }
}

function updateCategories() {
    const categoryFilter = document.getElementById('categoryFilter');
    const categories = new Set(allKnowledge.map(k => k.metadata?.category || 'general'));
    
    // Clear existing options except "All Categories"
    categoryFilter.innerHTML = '<option value="">All Categories</option>';
    
    categories.forEach(category => {
        const option = document.createElement('option');
        option.value = category;
        option.textContent = category.charAt(0).toUpperCase() + category.slice(1);
        categoryFilter.appendChild(option);
    });
}

function renderKnowledge() {
    const grid = document.getElementById('knowledgeGrid');
    const noResults = document.getElementById('noResults');
    
    if (filteredKnowledge.length === 0) {
        grid.style.display = 'none';
        noResults.style.display = 'block';
        return;
    }
    
    grid.style.display = 'grid';
    noResults.style.display = 'none';
    
    grid.innerHTML = filteredKnowledge.map(knowledge => `
        <div class="knowledge-card">
            <h3 class="knowledge-title">${escapeHtml(knowledge.metadata?.title || 'Untitled')}</h3>
            <div class="knowledge-meta">
                <span class="knowledge-category">${escapeHtml(knowledge.metadata?.category || 'general')}</span>
                <span class="knowledge-date">${new Date(knowledge.metadata?.createdAt).toLocaleDateString()}</span>
            </div>
            <div class="knowledge-content">${escapeHtml(truncateText(knowledge.content, 200))}</div>
            <div class="knowledge-actions">
                <button class="action-btn" onclick="viewKnowledge('${knowledge.id}')">View</button>
                <button class="action-btn" onclick="copyKnowledge('${knowledge.id}')">Copy</button>
            </div>
        </div>
    `).join('');
}

function searchKnowledge() {
    const query = document.getElementById('searchInput').value.toLowerCase();
    const category = document.getElementById('categoryFilter').value;
    
    filteredKnowledge = allKnowledge.filter(knowledge => {
        const matchesQuery = !query || 
            knowledge.content.toLowerCase().includes(query) ||
            (knowledge.metadata?.title || '').toLowerCase().includes(query);
        
        const matchesCategory = !category || 
            (knowledge.metadata?.category || 'general') === category;
        
        return matchesQuery && matchesCategory;
    });
    
    renderKnowledge();
}

function clearSearch() {
    document.getElementById('searchInput').value = '';
    document.getElementById('categoryFilter').value = '';
    filteredKnowledge = [...allKnowledge];
    renderKnowledge();
}

function viewKnowledge(id) {
    const knowledge = allKnowledge.find(k => k.id === id);
    if (knowledge) {
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0,0,0,0.8); z-index: 1000;
            display: flex; align-items: center; justify-content: center;
            padding: 2rem;
        `;
        
        modal.innerHTML = `
            <div style="
                background: var(--card-bg); border: 1px solid var(--neon-blue);
                border-radius: 8px; padding: 2rem; max-width: 80vw; max-height: 80vh;
                overflow-y: auto; position: relative;
            ">
                <button onclick="this.parentElement.parentElement.remove()" style="
                    position: absolute; top: 1rem; right: 1rem;
                    background: none; border: none; color: var(--text-secondary);
                    font-size: 1.5rem; cursor: pointer;
                ">×</button>
                <h2 style="color: var(--neon-blue); margin: 0 0 1rem 0;">
                    ${escapeHtml(knowledge.metadata?.title || 'Untitled')}
                </h2>
                <div style="margin-bottom: 1rem; color: var(--text-secondary);">
                    Category: ${escapeHtml(knowledge.metadata?.category || 'general')} | 
                    Created: ${new Date(knowledge.metadata?.createdAt).toLocaleString()}
                </div>
                <div style="color: var(--text-primary); line-height: 1.6; white-space: pre-wrap;">
                    ${escapeHtml(knowledge.content)}
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
    }
}

function copyKnowledge(id) {
    const knowledge = allKnowledge.find(k => k.id === id);
    if (knowledge) {
        navigator.clipboard.writeText(knowledge.content).then(() => {
            alert('Knowledge copied to clipboard!');
        }).catch(() => {
            alert('Failed to copy to clipboard');
        });
    }
}

function truncateText(text, maxLength) {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// Fetch and display text scripts
async function fetchTextScripts() {
  try {
    const response = await fetch('/api/agent/text-scripts');
    if (!response.ok) return null;
    const scripts = await response.json();
    updateTextScriptsDisplay(scripts);
    return scripts;
  } catch (error) {
    console.error('Failed to fetch text scripts:', error);
    return null;
  }
}

function updateTextScriptsDisplay(scripts) {
  if (!scripts || !scripts.length) {
    document.getElementById('text-scripts-count').textContent = '0';
    document.getElementById('text-scripts-preview').innerHTML = '<p class="loading-text">No text scripts found.</p>';
    return;
  }
  
  // Update count
  document.getElementById('text-scripts-count').textContent = scripts.length;
  
  // Update preview
  const previewContainer = document.getElementById('text-scripts-preview');
  previewContainer.innerHTML = '';
  
  scripts.slice(0, 5).forEach(script => {
    // Get platform icon
    let platformIcon = '🌐';
    let platformClass = '';
    if (script.platform) {
      platformClass = `platform-${script.platform}`;
      switch(script.platform) {
        case 'youtube': platformIcon = '📺'; break;
        case 'soundcloud': platformIcon = '🎵'; break;
        case 'vimeo': platformIcon = '🎬'; break;
        case 'patreon': platformIcon = '💰'; break;
        case 'bambicloud': platformIcon = '🌙'; break;
        case 'hypnotube': platformIcon = '💫'; break;
        case 'twitter': platformIcon = '🐦'; break;
        case 'reddit': platformIcon = '📱'; break;
        case 'discord': platformIcon = '💬'; break;
        case 'github': platformIcon = '📦'; break;
      }
    }
    
    const scriptElement = document.createElement('div');
    scriptElement.className = 'text-script-item';
    scriptElement.innerHTML = `
      <div class="script-header">
        <span class="script-title">${script.title}</span>
        <span class="script-relevance">⭐ ${script.relevance}/10</span>
      </div>
      <div class="script-meta">
        <span class="script-category">${script.category || 'scripts'}</span>
        ${script.platform ? `<span class="script-platform ${platformClass}">${platformIcon} ${script.platform}</span>` : ''}
        <span class="script-wordcount">${script.wordCount || 'Unknown'} words</span>
        <span class="script-date">Added: ${new Date(script.addedAt || script.timestamp).toLocaleDateString()}</span>
      </div>
      <div class="script-preview">${script.description || script.content.substring(0, 150)}${script.content.length > 150 ? '...' : ''}</div>
    `;
    previewContainer.appendChild(scriptElement);
  });
  
  if (scripts.length > 5) {
    const moreElement = document.createElement('div');
    moreElement.className = 'scripts-more';
    moreElement.innerHTML = `<p>... and ${scripts.length - 5} more scripts</p>`;
    previewContainer.appendChild(moreElement);
  }
}

// Q&A Functionality
// Ask a question
async function askQuestion(question) {
    // DOM elements
    const answerText = document.getElementById('answer-text');
    const sourcesContent = document.getElementById('sources-content');
    const suggestedQuestions = document.getElementById('questions-list');
    const loadingIndicator = document.getElementById('loading-indicator');
    const errorMessage = document.getElementById('error-message');
    const resultsContainer = document.querySelector('.results-container');
    const confidenceIndicator = document.getElementById('confidence-indicator');
    const answerCategories = document.getElementById('answer-categories');
    const answerDate = document.getElementById('answer-date');
    const knowledgeInfoSection = document.getElementById('knowledge-info-section');
    
    // Reset UI
    answerText.textContent = '';
    sourcesContent.textContent = '';
    suggestedQuestions.innerHTML = '';
    errorMessage.style.display = 'none';
    resultsContainer.style.display = 'none';
    loadingIndicator.style.display = 'block';
    
    try {
        // Send question to server
        const response = await fetch('/api/bambisleep/answer', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ question })
        });
        
        const data = await response.json();
        
        // Hide loading indicator
        loadingIndicator.style.display = 'none';
        
        if (!data.success) {
            // Show error message
            errorMessage.textContent = data.error || 'Failed to get an answer. Please try again.';
            errorMessage.style.display = 'block';
            return;
        }
        
        // Display answer
        answerText.textContent = data.answer;
        
        // Display confidence level
        if (data.confidence) {
            let confidenceText = 'Medium Confidence';
            let confidenceClass = 'medium';
            
            if (data.confidence >= 0.8) {
                confidenceText = 'High Confidence';
                confidenceClass = 'high';
            } else if (data.confidence < 0.5) {
                confidenceText = 'Low Confidence';
                confidenceClass = 'low';
            }
            
            confidenceIndicator.textContent = confidenceText;
            confidenceIndicator.className = `confidence-badge ${confidenceClass}`;
        }
        
        // Display categories
        if (data.categories && data.categories.length > 0) {
            answerCategories.textContent = data.categories.join(', ');
        } else {
            answerCategories.textContent = 'General';
        }
        
        // Display last updated date
        if (data.lastUpdated) {
            answerDate.textContent = new Date(data.lastUpdated).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }
        
        // Display sources if available
        if (data.citations && data.citations.trim()) {
            sourcesContent.innerHTML = data.citations.split('\n').map(line => `<p>${line}</p>`).join('');
            document.getElementById('answer-sources').style.display = 'block';
        } else {
            document.getElementById('answer-sources').style.display = 'none';
        }
        
        // Display suggested questions
        if (data.suggestedQuestions && data.suggestedQuestions.length > 0) {
            suggestedQuestions.innerHTML = data.suggestedQuestions.map(q => 
                `<li><a href="#" class="suggested-question">${q}</a></li>`
            ).join('');
            
            // Add event listeners to suggested questions
            document.querySelectorAll('.suggested-question').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const question = this.textContent;
                    document.getElementById('knowledge-question').value = question;
                    askQuestion(question);
                });
            });
        }
        
        // Show additional info section
        knowledgeInfoSection.style.display = 'block';
        
        // Show results
        resultsContainer.style.display = 'block';
        
        // Scroll to results
        resultsContainer.scrollIntoView({ behavior: 'smooth' });
    } catch (error) {
        console.error('Error asking question:', error);
        loadingIndicator.style.display = 'none';
        errorMessage.textContent = 'An error occurred while processing your question. Please try again later.';
        errorMessage.style.display = 'block';
    }
}

// Initialize knowledge base if empty
async function checkAndInitializeKnowledge() {
    try {
        // Check if knowledge base is empty
        const response = await fetch('/api/knowledge/list');
        const data = await response.json();
        
        if (!data || data.length === 0) {
            console.log('Knowledge base is empty, initializing...');
            
            // Show initialization message
            const errorMessage = document.getElementById('error-message');
            errorMessage.textContent = 'Initializing BambiSleep knowledge base. This may take a moment...';
            errorMessage.style.display = 'block';
            
            // Initialize knowledge base
            const initResponse = await fetch('/api/bambisleep/initialize', {
                method: 'POST'
            });
            
            const initData = await initResponse.json();
            
            if (initData.success) {
                console.log('Knowledge base initialized successfully');
                errorMessage.textContent = 'BambiSleep knowledge base initialized successfully! You can now ask questions.';
                setTimeout(() => {
                    errorMessage.style.display = 'none';
                }, 3000);
            } else {
                console.error('Failed to initialize knowledge base:', initData.error);
                errorMessage.textContent = 'Failed to initialize knowledge base. Some features may not work properly.';
            }
        }
        
        // Update the last updated date
        const statsResponse = await fetch('/api/knowledge/stats');
        const statsData = await statsResponse.json();
        
        if (statsData && statsData.lastUpdated) {
            const formattedDate = new Date(statsData.lastUpdated).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            
            const lastUpdatedDate = document.getElementById('last-updated-date');
            if (lastUpdatedDate) {
                lastUpdatedDate.textContent = formattedDate;
            }
        }
    } catch (error) {
        console.error('Error checking knowledge base:', error);
    }
}

// Send feedback
function sendFeedback(isHelpful) {
    const question = document.getElementById('knowledge-question').value.trim();
    
    fetch('/api/bambisleep/feedback', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            question: question,
            isHelpful: isHelpful
        })
    }).catch(error => {
        console.error('Error sending feedback:', error);
    });
}

// Add event listeners
document.addEventListener('DOMContentLoaded', function() {
    // Search form
    const askButton = document.getElementById('ask-button');
    const questionInput = document.getElementById('knowledge-question');
    
    if (askButton) {
        askButton.addEventListener('click', function() {
            const question = questionInput.value.trim();
            if (question) {
                askQuestion(question);
            }
        });
    }
    
    if (questionInput) {
        questionInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                const question = questionInput.value.trim();
                if (question) {
                    askQuestion(question);
                }
            }
        });
    }
    
    // Common questions
    const commonQuestionButtons = document.querySelectorAll('.ask-common-question');
    commonQuestionButtons.forEach(button => {
        button.addEventListener('click', function() {
            const card = this.closest('.question-card');
            const question = card.getAttribute('data-question');
            questionInput.value = question;
            askQuestion(question);
        });
    });
    
    // Category filtering
    const categoryBadges = document.querySelectorAll('.category-badge');
    const questionCards = document.querySelectorAll('.question-card');
    
    categoryBadges.forEach(badge => {
        badge.addEventListener('click', function() {
            const category = this.textContent.toLowerCase();
            
            // Toggle active state
            if (this.classList.contains('active')) {
                this.classList.remove('active');
                // Show all question cards if no category is selected
                if (!document.querySelector('.category-badge.active')) {
                    questionCards.forEach(card => {
                        card.style.display = 'block';
                    });
                }
            } else {
                // Remove active class from all badges
                categoryBadges.forEach(b => b.classList.remove('active'));
                
                // Add active class to clicked badge
                this.classList.add('active');
                
                // Filter question cards
                questionCards.forEach(card => {
                    if (card.classList.contains(`category-${category}`) || 
                        card.classList.contains(`category-${category.replace(' ', '-')}`)) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            }
        });
    });
    
    // Feedback buttons
    const feedbackHelpful = document.getElementById('feedback-helpful');
    const feedbackNotHelpful = document.getElementById('feedback-not-helpful');
    
    if (feedbackHelpful) {
        feedbackHelpful.addEventListener('click', function() {
            // Send positive feedback
            sendFeedback(true);
            this.textContent = '✓ Thank you!';
            this.disabled = true;
            feedbackNotHelpful.disabled = true;
        });
    }
    
    if (feedbackNotHelpful) {
        feedbackNotHelpful.addEventListener('click', function() {
            // Send negative feedback
            sendFeedback(false);
            this.textContent = '✓ Thank you for your feedback';
            this.disabled = true;
            feedbackHelpful.disabled = true;
        });
    }
    
    // Script preview section functionality
    const viewAllScriptsBtn = document.querySelector('.view-all-scripts-btn');
    const scriptItems = document.querySelectorAll('.text-script-item');
    
    if (viewAllScriptsBtn) {
        viewAllScriptsBtn.addEventListener('click', function() {
            document.getElementById('categoryFilter').value = 'scripts';
            searchKnowledge();
            
            // Scroll to knowledge grid
            document.getElementById('knowledgeGrid').scrollIntoView({ behavior: 'smooth' });
        });
    }
    
    scriptItems.forEach(item => {
        item.addEventListener('click', function() {
            const title = this.querySelector('.script-title').textContent;
            const preview = this.querySelector('.script-preview').textContent;
            
            // Find if there's a matching knowledge entry
            const scriptEntry = allKnowledge.find(k => 
                (k.metadata?.title || '').toLowerCase() === title.toLowerCase() &&
                (k.metadata?.category || '').toLowerCase() === 'scripts'
            );
            
            if (scriptEntry) {
                viewKnowledge(scriptEntry.id);
            } else {
                // Create a modal with preview content if no matching entry
                const modal = document.createElement('div');
                modal.classList.add('script-modal');
                
                const modalContent = document.createElement('div');
                modalContent.classList.add('script-modal-content');
                
                const closeBtn = document.createElement('button');
                closeBtn.classList.add('script-modal-close');
                closeBtn.innerHTML = '&times;';
                closeBtn.addEventListener('click', () => modal.remove());
                
                const modalTitle = document.createElement('h3');
                modalTitle.textContent = title;
                modalTitle.classList.add('script-modal-title');
                
                const modalBody = document.createElement('div');
                modalBody.classList.add('script-modal-body');
                
                // Replace this with actual script content fetching if available
                const scriptContent = preview.length > 100 
                    ? preview 
                    : preview + "\n\n[Full script content would be displayed here. This is a preview.]";
                
                modalBody.textContent = scriptContent;
                
                const modalFooter = document.createElement('div');
                modalFooter.classList.add('script-modal-footer');
                
                const askButton = document.createElement('button');
                askButton.textContent = 'Ask about this script';
                askButton.classList.add('script-ask-btn');
                askButton.addEventListener('click', () => {
                    const question = `Tell me about the "${title}" script`;
                    document.getElementById('knowledge-question').value = question;
                    document.getElementById('ask-button').click();
                    modal.remove();
                });
                
                modalFooter.appendChild(askButton);
                modalContent.appendChild(closeBtn);
                modalContent.appendChild(modalTitle);
                modalContent.appendChild(modalBody);
                modalContent.appendChild(modalFooter);
                modal.appendChild(modalContent);
                
                document.body.appendChild(modal);
            }
        });
    });
});

document.getElementById('searchInput').addEventListener('input', searchKnowledge);
document.getElementById('categoryFilter').addEventListener('change', searchKnowledge);
</script>

<%- include('../partials/footer') %>
