<%- include('../partials/header') %>

<main>
    <div class="unified-homepage">
        <!-- Hero Section -->
        <div class="hero-section">
            <h1 class="neon-text scan-line">KNOWLEDGE BASE</h1>
            <p class="hero-subtitle">Discover and explore collected wisdom</p>
        </div>
        
        <!-- Knowledge Stats -->
        <div class="knowledge-stats">
            <div class="stat-card">
                <span class="stat-number" id="totalEntries">0</span>
                <span class="stat-label">Knowledge Entries</span>
            </div>
            <div class="stat-card">
                <span class="stat-number" id="totalCategories">0</span>
                <span class="stat-label">Categories</span>
            </div>
            <div class="stat-card">
                <span class="stat-number" id="lastUpdated">Never</span>
                <span class="stat-label">Last Updated</span>
            </div>
        </div>

        <!-- Search Section -->
        <div class="knowledge-search">
            <div class="search-container">
                <input type="text" id="searchInput" placeholder="Search knowledge base..." class="search-input">
                <button onclick="searchKnowledge()" class="search-btn">üîç</button>
            </div>
            <div class="search-filters">
                <select id="categoryFilter" class="filter-select">
                    <option value="">All Categories</option>
                </select>
                <button onclick="clearSearch()" class="clear-btn">Clear</button>
            </div>
        </div>

        <!-- Add Knowledge Section -->
        <div class="add-knowledge-section">
            <h3>Add New Knowledge</h3>
            <div class="add-form">
                <input type="text" id="knowledgeTitle" placeholder="Title..." class="form-input">
                <select id="knowledgeCategory" class="form-select">
                    <option value="general">General</option>
                    <option value="meditation">Meditation</option>
                    <option value="techniques">Techniques</option>
                    <option value="community">Community</option>
                    <option value="resources">Resources</option>
                </select>
                <textarea id="knowledgeContent" placeholder="Enter knowledge content..." class="form-textarea"></textarea>
                <button onclick="addKnowledge()" class="add-btn">Add Knowledge</button>
            </div>
        </div>

        <!-- Knowledge Grid -->
        <div class="knowledge-grid" id="knowledgeGrid">
            <!-- Knowledge cards will be populated here -->
        </div>

        <!-- No Results Message -->
        <div class="no-results" id="noResults" style="display: none;">
            <p>No knowledge entries found.</p>
        </div>
    </div>
</main>

<style>
.knowledge-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin: 2rem 0;
}

.stat-card {
    background: var(--color-overlay-purple);
    border: 1px solid var(--color-primary-cyan);
    border-radius: 8px;
    padding: 1.5rem;
    text-align: center;
    box-shadow: 0 0 10px var(--glow-cyan);
}

.stat-number {
    display: block;
    font-size: 2rem;
    font-weight: bold;
    color: var(--color-primary-green);
    margin-bottom: 0.5rem;
}

.stat-label {
    color: var(--color-text-secondary);
    text-transform: uppercase;
    font-size: 0.875rem;
}

.knowledge-search {
    background: var(--color-overlay-purple);
    border: 1px solid var(--color-primary-cyan);
    border-radius: 8px;
    padding: 1.5rem;
    margin: 2rem 0;
}

.search-container {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
}

.search-input {
    flex: 1;
    padding: 0.75rem;
    background: var(--color-bg-dark);
    border: 1px solid var(--color-primary-cyan);
    border-radius: 4px;
    color: var(--color-text-primary);
    font-size: 1rem;
}

.search-input:focus {
    outline: none;
    border-color: var(--color-primary-cyan);
    box-shadow: 0 0 5px var(--glow-cyan);
}

.search-btn {
    padding: 0.75rem 1rem;
    background: var(--color-primary-cyan);
    border: none;
    border-radius: 4px;
    color: var(--color-bg-dark);
    cursor: pointer;
    font-size: 1rem;
    font-weight: bold;
}

.search-btn:hover {
    background: var(--color-primary-green);
    box-shadow: 0 0 10px var(--glow-green);
}

.search-filters {
    display: flex;
    gap: 0.5rem;
    align-items: center;
}

.filter-select, .form-select {
    padding: 0.5rem;
    background: var(--color-bg-dark);
    border: 1px solid var(--color-primary-cyan);
    border-radius: 4px;
    color: var(--color-text-primary);
}

.clear-btn {
    padding: 0.5rem 1rem;
    background: var(--color-bg-dark);
    border: 1px solid var(--color-primary-cyan);
    border-radius: 4px;
    color: var(--color-text-primary);
    cursor: pointer;
}

.clear-btn:hover {
    border-color: var(--color-primary-green);
    color: var(--color-primary-green);
}

.add-knowledge-section {
    background: var(--color-overlay-purple);
    border: 1px solid var(--color-primary-green);
    border-radius: 8px;
    padding: 1.5rem;
    margin: 2rem 0;
}

.add-knowledge-section h3 {
    color: var(--color-primary-green);
    margin: 0 0 1rem 0;
}

.add-form {
    display: grid;
    gap: 1rem;
}

.form-input, .form-textarea {
    padding: 0.75rem;
    background: var(--color-bg-dark);
    border: 1px solid var(--color-primary-cyan);
    border-radius: 4px;
    color: var(--color-text-primary);
    font-family: inherit;
}

.form-textarea {
    min-height: 120px;
    resize: vertical;
}

.form-input:focus, .form-textarea:focus {
    outline: none;
    border-color: var(--color-primary-green);
    box-shadow: 0 0 5px var(--glow-green);
}

.add-btn {
    padding: 0.75rem 1.5rem;
    background: var(--color-primary-green);
    border: none;
    border-radius: 4px;
    color: var(--color-bg-dark);
    font-weight: bold;
    cursor: pointer;
    justify-self: start;
}

.add-btn:hover {
    background: var(--color-primary-yellow);
    box-shadow: 0 0 10px var(--glow-yellow);
}

.knowledge-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 1.5rem;
    margin: 2rem 0;
}

.knowledge-card {
    background: var(--color-overlay-purple);
    border: 1px solid var(--color-primary-cyan);
    border-radius: 8px;
    padding: 1.5rem;
    transition: all 0.3s ease;
}

.knowledge-card:hover {
    border-color: var(--color-primary-magenta);
    box-shadow: 0 0 15px var(--glow-magenta);
}

.knowledge-title {
    color: var(--color-primary-cyan);
    font-size: 1.25rem;
    font-weight: bold;
    margin: 0 0 0.75rem 0;
}

.knowledge-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    font-size: 0.875rem;
    color: var(--color-text-secondary);
}

.knowledge-category {
    background: var(--glow-green);
    color: var(--color-primary-green);
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    text-transform: uppercase;
    font-weight: bold;
}

.knowledge-date {
    color: var(--color-text-secondary);
    opacity: 0.7;
}

.knowledge-content {
    color: var(--color-text-secondary);
    line-height: 1.6;
    margin-bottom: 1rem;
}

.knowledge-actions {
    display: flex;
    gap: 0.5rem;
    justify-content: flex-end;
}

.action-btn {
    padding: 0.25rem 0.5rem;
    background: transparent;
    border: 1px solid var(--color-primary-cyan);
    border-radius: 4px;
    color: var(--color-primary-cyan);
    cursor: pointer;
    font-size: 0.875rem;
    transition: all 0.3s ease;
}

.action-btn:hover {
    border-color: var(--color-primary-magenta);
    color: var(--color-primary-magenta);
    box-shadow: 0 0 5px var(--glow-magenta);
}

.no-results {
    text-align: center;
    padding: 3rem;
    color: var(--color-text-secondary);
    font-size: 1.125rem;
    opacity: 0.7;
}

.loading {
    text-align: center;
    padding: 2rem;
    color: var(--color-primary-cyan);
}

@media (max-width: 768px) {
    .knowledge-stats {
        grid-template-columns: 1fr;
    }
    
    .knowledge-grid {
        grid-template-columns: 1fr;
    }
    
    .search-container {
        flex-direction: column;
    }
    
    .search-filters {
        flex-direction: column;
        align-items: stretch;
    }
}
</style>

<script>
let allKnowledge = [];
let filteredKnowledge = [];

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
    loadKnowledge();
});

async function loadKnowledge() {
    try {
        const response = await fetch('/api/knowledge');
        const data = await response.json();
        
        if (data.success) {
            allKnowledge = data.entries || [];
            filteredKnowledge = [...allKnowledge];
            updateStats();
            updateCategories();
            renderKnowledge();
        } else {
            console.error('Failed to load knowledge:', data.error);
        }
    } catch (error) {
        console.error('Error loading knowledge:', error);
        document.getElementById('knowledgeGrid').innerHTML = '<div class="loading">Failed to load knowledge</div>';
    }
}

function updateStats() {
    document.getElementById('totalEntries').textContent = allKnowledge.length;
    
    const categories = new Set(allKnowledge.map(k => k.metadata?.category || 'general'));
    document.getElementById('totalCategories').textContent = categories.size;
    
    if (allKnowledge.length > 0) {
        const latest = allKnowledge.reduce((latest, current) => {
            return new Date(current.metadata?.createdAt || 0) > new Date(latest.metadata?.createdAt || 0) ? current : latest;
        });
        const date = new Date(latest.metadata?.createdAt).toLocaleDateString();
        document.getElementById('lastUpdated').textContent = date;
    }
}

function updateCategories() {
    const categoryFilter = document.getElementById('categoryFilter');
    const categories = new Set(allKnowledge.map(k => k.metadata?.category || 'general'));
    
    // Clear existing options except "All Categories"
    categoryFilter.innerHTML = '<option value="">All Categories</option>';
    
    categories.forEach(category => {
        const option = document.createElement('option');
        option.value = category;
        option.textContent = category.charAt(0).toUpperCase() + category.slice(1);
        categoryFilter.appendChild(option);
    });
}

function renderKnowledge() {
    const grid = document.getElementById('knowledgeGrid');
    const noResults = document.getElementById('noResults');
    
    if (filteredKnowledge.length === 0) {
        grid.style.display = 'none';
        noResults.style.display = 'block';
        return;
    }
    
    grid.style.display = 'grid';
    noResults.style.display = 'none';
    
    grid.innerHTML = filteredKnowledge.map(knowledge => `
        <div class="knowledge-card">
            <h3 class="knowledge-title">${escapeHtml(knowledge.metadata?.title || 'Untitled')}</h3>
            <div class="knowledge-meta">
                <span class="knowledge-category">${escapeHtml(knowledge.metadata?.category || 'general')}</span>
                <span class="knowledge-date">${new Date(knowledge.metadata?.createdAt).toLocaleDateString()}</span>
            </div>
            <div class="knowledge-content">${escapeHtml(truncateText(knowledge.content, 200))}</div>
            <div class="knowledge-actions">
                <button class="action-btn" onclick="viewKnowledge('${knowledge.id}')">View</button>
                <button class="action-btn" onclick="copyKnowledge('${knowledge.id}')">Copy</button>
            </div>
        </div>
    `).join('');
}

function searchKnowledge() {
    const query = document.getElementById('searchInput').value.toLowerCase();
    const category = document.getElementById('categoryFilter').value;
    
    filteredKnowledge = allKnowledge.filter(knowledge => {
        const matchesQuery = !query || 
            knowledge.content.toLowerCase().includes(query) ||
            (knowledge.metadata?.title || '').toLowerCase().includes(query);
        
        const matchesCategory = !category || 
            (knowledge.metadata?.category || 'general') === category;
        
        return matchesQuery && matchesCategory;
    });
    
    renderKnowledge();
}

function clearSearch() {
    document.getElementById('searchInput').value = '';
    document.getElementById('categoryFilter').value = '';
    filteredKnowledge = [...allKnowledge];
    renderKnowledge();
}

async function addKnowledge() {
    const title = document.getElementById('knowledgeTitle').value.trim();
    const category = document.getElementById('knowledgeCategory').value;
    const content = document.getElementById('knowledgeContent').value.trim();
    
    if (!content) {
        alert('Please enter knowledge content');
        return;
    }
    
    try {
        const response = await fetch('/api/knowledge', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                title: title || 'Untitled',
                category: category,
                content: content
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // Clear form
            document.getElementById('knowledgeTitle').value = '';
            document.getElementById('knowledgeContent').value = '';
            document.getElementById('knowledgeCategory').value = 'general';
            
            // Reload knowledge
            await loadKnowledge();
            
            alert('Knowledge added successfully!');
        } else {
            alert('Failed to add knowledge: ' + (data.error || 'Unknown error'));
        }
    } catch (error) {
        console.error('Error adding knowledge:', error);
        alert('Failed to add knowledge');
    }
}

function viewKnowledge(id) {
    const knowledge = allKnowledge.find(k => k.id === id);
    if (knowledge) {
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0,0,0,0.8); z-index: 1000;
            display: flex; align-items: center; justify-content: center;
            padding: 2rem;
        `;
        
        modal.innerHTML = `
            <div style="
                background: var(--card-bg); border: 1px solid var(--neon-blue);
                border-radius: 8px; padding: 2rem; max-width: 80vw; max-height: 80vh;
                overflow-y: auto; position: relative;
            ">
                <button onclick="this.parentElement.parentElement.remove()" style="
                    position: absolute; top: 1rem; right: 1rem;
                    background: none; border: none; color: var(--text-secondary);
                    font-size: 1.5rem; cursor: pointer;
                ">√ó</button>
                <h2 style="color: var(--neon-blue); margin: 0 0 1rem 0;">
                    ${escapeHtml(knowledge.metadata?.title || 'Untitled')}
                </h2>
                <div style="margin-bottom: 1rem; color: var(--text-secondary);">
                    Category: ${escapeHtml(knowledge.metadata?.category || 'general')} | 
                    Created: ${new Date(knowledge.metadata?.createdAt).toLocaleString()}
                </div>
                <div style="color: var(--text-primary); line-height: 1.6; white-space: pre-wrap;">
                    ${escapeHtml(knowledge.content)}
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
    }
}

function copyKnowledge(id) {
    const knowledge = allKnowledge.find(k => k.id === id);
    if (knowledge) {
        navigator.clipboard.writeText(knowledge.content).then(() => {
            alert('Knowledge copied to clipboard!');
        }).catch(() => {
            alert('Failed to copy to clipboard');
        });
    }
}

function truncateText(text, maxLength) {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// Add event listeners
document.getElementById('searchInput').addEventListener('input', searchKnowledge);
document.getElementById('categoryFilter').addEventListener('change', searchKnowledge);
</script>

<%- include('../partials/footer') %>
