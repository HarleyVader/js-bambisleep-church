<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - Bambi Sleep Church</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <%- include('../partials/header') %>
    
    <div class="agent-detail">
        <!-- Agent Header -->
        <div class="agent-header">
            <div class="back-nav">
                <a href="/agents" class="ui-button-secondary">‚Üê Back to Agents</a>
            </div>
            <div class="agent-title-section">
                <h1 class="agent-name"><%= agent.name %></h1>
                <p class="agent-description"><%= agent.description %></p>
                <div class="agent-status-badge status-<%= agent.status %>">
                    <span class="status-indicator"></span>
                    <%= agent.status.toUpperCase() %>
                </div>
            </div>
        </div>

        <!-- Agent Stats Dashboard -->
        <div class="stats-grid">
            <div class="stat-card">
                <h3>Status</h3>
                <div class="stat-value status-<%= agent.status %>">
                    <%= agent.status.toUpperCase() %>
                </div>
                <small>Current agent state</small>
            </div>
            
            <div class="stat-card">
                <h3>Created</h3>
                <div class="stat-value">
                    <%= new Date(agent.created).toLocaleDateString() %>
                </div>
                <small><%= new Date(agent.created).toLocaleTimeString() %></small>
            </div>
            
            <div class="stat-card">
                <h3>Tools</h3>
                <div class="stat-value">
                    <%= agent.tools ? agent.tools.length : 0 %>
                </div>
                <small>Available capabilities</small>
            </div>
            
            <div class="stat-card">
                <h3>Conversations</h3>
                <div class="stat-value" id="conversationCount">
                    <%= agent.conversations ? agent.conversations.length : 0 %>
                </div>
                <small>Total interactions</small>
            </div>
        </div>

        <!-- Agent Configuration -->
        <div class="config-section">
            <h2>Agent Configuration</h2>
            
            <!-- System Prompt -->
            <div class="config-card">
                <h3>System Prompt</h3>
                <div class="prompt-display">
                    <pre class="agent-prompt"><%= agent.prompt %></pre>
                </div>
            </div>
            
            <!-- Tools & Capabilities -->
            <div class="config-card">
                <h3>Tools & Capabilities</h3>
                <div class="tools-list">
                    <% if (agent.tools && agent.tools.length > 0) { %>
                        <% agent.tools.forEach(tool => { %>
                            <span class="tool-badge"><%= tool %></span>
                        <% }); %>
                    <% } else { %>
                        <span class="no-tools">No tools configured</span>
                    <% } %>
                </div>
            </div>
        </div>

        <!-- Interactive Agent Console -->
        <div class="agent-console">
            <h2>Agent Console</h2>
            
            <!-- Prompt Input -->
            <div class="console-input">
                <h3>Send Prompt</h3>
                <div class="prompt-form">
                    <textarea id="agentPromptInput" 
                              placeholder="Enter your prompt for <%= agent.name %>..." 
                              class="ui-textarea console-textarea"
                              rows="4"></textarea>
                    <div class="prompt-controls">
                        <button onclick="sendPrompt()" class="ui-button">Send Prompt</button>
                        <button onclick="clearConsole()" class="ui-button-secondary">Clear Console</button>
                    </div>
                </div>
            </div>
            
            <!-- Working Progress -->
            <div class="progress-section" id="progressSection" style="display: none;">
                <h3>Working Progress</h3>
                <div class="progress-container">
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressFill"></div>
                    </div>
                    <div class="progress-text" id="progressText">Processing...</div>
                </div>
            </div>
            
            <!-- Agent Response -->
            <div class="response-section">
                <h3>Agent Response</h3>
                <div id="agentResponse" class="agent-response-container">
                    <div class="no-response">No responses yet. Send a prompt to start interacting with <%= agent.name %>.</div>
                </div>
            </div>
        </div>

        <!-- Conversation History -->
        <div class="history-section">
            <h2>Conversation History</h2>
            <div id="conversationHistory" class="conversation-list">
                <% if (agent.conversations && agent.conversations.length > 0) { %>
                    <% agent.conversations.slice(-10).reverse().forEach((conv, index) => { %>
                        <div class="conversation-item">
                            <div class="conversation-meta">
                                <span class="timestamp"><%= new Date(conv.timestamp).toLocaleString() %></span>
                                <span class="response-time">Response: <%= conv.responseTime || 'N/A' %></span>
                            </div>
                            <div class="conversation-content">
                                <div class="user-prompt">
                                    <strong>Prompt:</strong> <%= conv.prompt %>
                                </div>
                                <div class="agent-response">
                                    <strong>Response:</strong> <%= conv.response %>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="no-history">No conversation history yet.</div>
                <% } %>
            </div>
        </div>
    </div>

    <script>
        const agentId = '<%= agent.id %>';
        let isProcessing = false;

        async function sendPrompt() {
            const input = document.getElementById('agentPromptInput');
            const prompt = input.value.trim();
            
            if (!prompt || isProcessing) return;
            
            isProcessing = true;
            showProgress();
            
            const startTime = Date.now();
            
            try {
                const response = await fetch(`/api/agents/${agentId}/prompt`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ message: prompt })
                });
                
                const data = await response.json();
                const responseTime = Date.now() - startTime;
                
                displayResponse(prompt, data.response, responseTime);
                updateStats();
                input.value = '';
                
            } catch (error) {
                displayError('Error communicating with agent: ' + error.message);
            } finally {
                isProcessing = false;
                hideProgress();
            }
        }
        
        function showProgress() {
            const progressSection = document.getElementById('progressSection');
            const progressFill = document.getElementById('progressFill');
            const progressText = document.getElementById('progressText');
            
            progressSection.style.display = 'block';
            progressFill.style.width = '0%';
            progressText.textContent = 'Processing...';
            
            // Simulate progress
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 15;
                if (progress > 90) progress = 90;
                progressFill.style.width = progress + '%';
                
                if (!isProcessing) {
                    clearInterval(interval);
                    progressFill.style.width = '100%';
                    progressText.textContent = 'Complete!';
                    setTimeout(hideProgress, 500);
                }
            }, 200);
        }
        
        function hideProgress() {
            document.getElementById('progressSection').style.display = 'none';
        }
        
        function displayResponse(prompt, response, responseTime) {
            const container = document.getElementById('agentResponse');
            const responseDiv = document.createElement('div');
            responseDiv.className = 'response-item';
            responseDiv.innerHTML = `
                <div class="response-meta">
                    <span class="timestamp">${new Date().toLocaleString()}</span>
                    <span class="response-time">${(responseTime / 1000).toFixed(2)}s</span>
                </div>
                <div class="response-content">
                    <div class="prompt-echo"><strong>Prompt:</strong> ${escapeHtml(prompt)}</div>
                    <div class="agent-reply"><strong>Response:</strong> ${escapeHtml(response)}</div>
                </div>
            `;
            
            container.innerHTML = '';
            container.appendChild(responseDiv);
        }
        
        function displayError(error) {
            const container = document.getElementById('agentResponse');
            container.innerHTML = `<div class="error-response">${escapeHtml(error)}</div>`;
        }
        
        function clearConsole() {
            document.getElementById('agentResponse').innerHTML = 
                '<div class="no-response">Console cleared. Send a prompt to start interacting with <%= agent.name %>.</div>';
        }
        
        function updateStats() {
            const count = document.getElementById('conversationCount');
            count.textContent = parseInt(count.textContent) + 1;
        }
        
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
        
        // Enter key support
        document.getElementById('agentPromptInput').addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
                sendPrompt();
            }
        });
    </script>
</body>
</html>
